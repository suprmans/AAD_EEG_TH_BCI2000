<!DOCTYPE html>
<html lang="en" dir="ltr">
<head>
<meta charset="UTF-8"/>
<title>Programming Reference:VisualizationContainerDemo Signal Processing - BCI2000 Help</title>
<link rel='shortcut icon' href='../../rsrc/favicon.ico' />
<style type='text/css'>
html { font-size:95%; font-family:arial,helvetica,sans-serif }
.printfooter { display:none }
#tocmain { font-size:81%; font-weight:bold; color:grey; background-color:white; border:1px solid black; padding:1em; z-index:10; position:fixed; left:-1px; top:-1px; width:150px; }
#tocmain a { color:black; text-decoration:none }
#tocmain ul { margin:0 0 0 0.4em; padding:0.1em 0 0 0.1em; list-style-position:outside; list-style-type:disc }
#tocmain li { text-indent:0; margin:0 0 0 1em; padding: 0 0 0 0 }
#tocmain p { margin:0; padding:0.1em 0 0 0.1em }
#tocmain .toc1 { margin-left:1.25em; }
#tocmain .toc2 { margin-left:2.25em; }
#tocmain .toc3 { margin-left:3.25em; }
#article { font-size:91%; position:absolute; left:200px; right:0; padding:1em; margin:0 }
</style>
</head>
<body>
 <div id='tocmain'>
 <a href='Main_Page.html'><img src='../../rsrc/bci2000logo.svg' alt='[Main Page]' /></a> <hr class="sep" /><p class="toc0"><a href="User_Tutorial%253ABCI2000_Tour.html">GettingStarted</a></p><ul></ul><p class="toc0"><a href="User_Reference%253AContents.html">User Manual</a></p><ul></ul><p class="toc0"><a href="Technical_Reference%253AContents.html">Technical Reference</a></p><ul></ul><p class="toc0"><a href="Programming_Reference%253AContents.html">Programming Manual</a></p><ul><li class="toc1">Concepts</li><ul><li class="toc2"><a href="Programming_Reference%253AFilter_Chain.html">Filter Chain</a></li><li class="toc2"><a href="Programming_Reference%253ASignals.html">Signals</a></li><li class="toc2"><a href="Programming_Reference%253AError_Handling.html">Error Handling</a></li><li class="toc2"><a href="Programming_Reference%253ALocalization.html">Localization</a></li><li class="toc2"><a href="Programming_Reference%253ARapid_Development.html">Rapid Development</a></li></ul><li class="toc1">Reference</li><ul><li class="toc2"><a href="Programming_Reference%253AGenericFilter_Class.html">GenericFilter</a></li><li class="toc2"><a href="Programming_Reference%253AEnvironment_Class.html">Environment</a></li><li class="toc2"><a href="Programming_Reference%253AGenericVisualization_Class.html">GenericVisualization</a></li><li class="toc2"><a href="Programming_Reference%253AErrors_and_Warnings.html">Errors and Warnings</a></li><li class="toc2"><a href="Programming_Reference%253ADebug_Output.html">Debug Output</a></li></ul><li class="toc1">Data Acquisition</li><ul><li class="toc2"><a href="Programming_Reference%253AGenericADC_Class.html">GenericADC</a></li></ul><li class="toc1">Data Storage</li><ul><li class="toc2"><a href="Programming_Reference%253AGenericFileWriter_Class.html">GenericFileWriter</a></li><li class="toc2"><a href="Programming_Reference%253ABCI2000FileReader_Class.html">BCI2000FileReader</a></li></ul><li class="toc1">Signal Processing</li><ul><li class="toc2"><a href="Programming_Reference%253AIIRFilterBase_Class.html">IIR Filters</a></li></ul><li class="toc1">Application Modules</li><ul><li class="toc2"><a href="Programming_Reference%253AApplicationBase_Class.html">ApplicationBase</a></li><li class="toc2"><a href="Programming_Reference%253AFeedbackTask_Class.html">FeedbackTask</a></li><li class="toc2"><a href="Programming_Reference%253AStimulusTask_Class.html">StimulusTask</a></li><li class="toc2"><a href="Programming_Reference%253A3D_API.html">3D API</a></li></ul><li class="toc1">Howtos</li><ul><li class="toc2"><a href="Programming_Howto%253ABuilding_BCI2000.html">Building BCI2000</a></li><li class="toc2"><a href="Programming_Howto%253ASVN_Client_Setup.html">SVN Client Setup</a></li><li class="toc2"><a href="Programming_Howto%253AUsing_TortoiseSVN.html">Using TortoiseSVN</a></li></ul><li class="toc1"><a href="Programming_FAQ.html">FAQ</a></li><li class="toc1">Tutorials</li><ul><li class="toc2"><a href="Programming_Tutorial%253AImplementing_a_Data_Acquisition_Module.html">Data Acquisition</a></li><li class="toc2"><a href="Programming_Tutorial%253AImplementing_a_Signal_Processing_Filter.html">Signal Processing</a></li><li class="toc2"><a href="Programming_Tutorial%253AImplementing_a_Matlab-based_Filter.html">Matlab Signal Processing</a></li></ul></ul><p class="toc0"><a href="Contributions%253AContents.html">Contributions</a></p><ul></ul><hr class="sep" /><p class="toc0"><a href="BCI2000_Glossary.html">BCI2000 Glossary</a></p> </div>
 <div id='article'>
 <h1 class = "pagetitle">VisualizationContainerDemo Signal Processing</h1>
 <p class = "subtitle">Programming Reference</p>
 <hr class = "sep" />
 <div id="mw-content-text" class="mw-body-content mw-content-ltr" lang="en" dir="ltr"><div class="mw-parser-output"><div id="toc" class="toc" role="navigation" aria-labelledby="mw-toc-heading"><input type="checkbox" role="button" id="toctogglecheckbox" class="toctogglecheckbox" style="display:none" /><div class="toctitle" lang="en" dir="ltr"><h2 id="mw-toc-heading">Contents</h2><span class="toctogglespan"><label class="toctogglelabel" for="toctogglecheckbox"></label></span></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="Programming_Reference%253AVisualizationContainerDemo_Signal_Processing.html#Location"><span class="tocnumber">1</span> <span class="toctext">Location</span></a></li>
<li class="toclevel-1 tocsection-2"><a href="Programming_Reference%253AVisualizationContainerDemo_Signal_Processing.html#Synopsis"><span class="tocnumber">2</span> <span class="toctext">Synopsis</span></a></li>
<li class="toclevel-1 tocsection-3"><a href="Programming_Reference%253AVisualizationContainerDemo_Signal_Processing.html#Inheritance"><span class="tocnumber">3</span> <span class="toctext">Inheritance</span></a></li>
<li class="toclevel-1 tocsection-4"><a href="Programming_Reference%253AVisualizationContainerDemo_Signal_Processing.html#Function"><span class="tocnumber">4</span> <span class="toctext">Function</span></a></li>
<li class="toclevel-1 tocsection-5"><a href="Programming_Reference%253AVisualizationContainerDemo_Signal_Processing.html#Implementation"><span class="tocnumber">5</span> <span class="toctext">Implementation</span></a>
<ul>
<li class="toclevel-2 tocsection-6"><a href="Programming_Reference%253AVisualizationContainerDemo_Signal_Processing.html#Declaration_of_internal_variables"><span class="tocnumber">5.1</span> <span class="toctext">Declaration of internal variables</span></a></li>
<li class="toclevel-2 tocsection-7"><a href="Programming_Reference%253AVisualizationContainerDemo_Signal_Processing.html#VisualizationObject::update()"><span class="tocnumber">5.2</span> <span class="toctext">VisualizationObject::update()</span></a></li>
<li class="toclevel-2 tocsection-8"><a href="Programming_Reference%253AVisualizationContainerDemo_Signal_Processing.html#VisualizationObject::reset()"><span class="tocnumber">5.3</span> <span class="toctext">VisualizationObject::reset()</span></a></li>
<li class="toclevel-2 tocsection-9"><a href="Programming_Reference%253AVisualizationContainerDemo_Signal_Processing.html#Process()_function"><span class="tocnumber">5.4</span> <span class="toctext">Process() function</span></a></li>
<li class="toclevel-2 tocsection-10"><a href="Programming_Reference%253AVisualizationContainerDemo_Signal_Processing.html#StartRun()_and_StopRun()"><span class="tocnumber">5.5</span> <span class="toctext">StartRun() and StopRun()</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-11"><a href="Programming_Reference%253AVisualizationContainerDemo_Signal_Processing.html#See_also"><span class="tocnumber">6</span> <span class="toctext">See also</span></a></li>
</ul>
</div>

<h2><span class="mw-headline" id="Location">Location</span></h2>
<p><tt>src/contrib/SignalProcessing/VisualizationContainerDemo</tt>
</p>
<h2><span class="mw-headline" id="Synopsis">Synopsis</span></h2>
<p>The <i>VisualizationContainerDemo</i> signal processing module demonstrates how to maintain a number of visualization displays within a container window. It is similar to <a href="Programming_Reference%253AComplexVisualizationDemo_Signal_Processing.html" title="Programming Reference:ComplexVisualizationDemo Signal Processing">Programming Reference:ComplexVisualizationDemo Signal Processing</a> but does not render graphics itself; rather, it maintains a group of visualization windows within a container window, and sends data to these.
</p>
<h2><span class="mw-headline" id="Inheritance">Inheritance</span></h2>
<p>The <i>VisualizationContainerDemo</i> signal processing filter derives from <i>GenericFilter</i>.
</p>
<h2><span class="mw-headline" id="Function">Function</span></h2>
<p>The <i>VisualizationContainerDemo</i> computes pairwise determination coefficients (squared correlation, <span class="mwe-math-element"><span class="mwe-math-mathml-inline mwe-math-mathml-a11y" style="display: none;"><math xmlns="http://www.w3.org/1998/Math/MathML"  alttext="{\displaystyle r^{2}}">
  <semantics>
    <mrow class="MJX-TeXAtom-ORD">
      <mstyle displaystyle="true" scriptlevel="0">
        <msup>
          <mi>r</mi>
          <mrow class="MJX-TeXAtom-ORD">
            <mn>2</mn>
          </mrow>
        </msup>
      </mstyle>
    </mrow>
    <annotation encoding="application/x-tex">{\displaystyle r^{2}}</annotation>
  </semantics>
</math></span><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/a363a15442d031416d1eb62254a9c726e3f6c66c" class="mwe-math-fallback-image-inline" aria-hidden="true" style="vertical-align: -0.338ex; width:2.103ex; height:2.676ex;" alt="{\displaystyle r^{2}}"/></span> values) between its input channels. Determination coefficients are sent to a group of visualizations in the Operator module.
</p><p>Operator visualizations are contained in a parent window, and arranged in form of a triangular matrix, with each window appearing at the place of its associated correlation matrix element:
</p><p><a href="https://www.bci2000.org/mediawiki/index.php/File:VisualizationContainerDemo.PNG" class="image"><img alt="VisualizationContainerDemo.PNG" src="../images/d/d2/VisualizationContainerDemo.PNG" decoding="async" width="720" height="751" /></a>
</p>
<h2><span class="mw-headline" id="Implementation">Implementation</span></h2>
<p>Each visualization window is implemented as a <i>VisualizationObject</i> that contains a <i>Visualization</i> and a <i>Computation</i> object. Whenever a new block of data arrives, computation is done for the individual window's pair of channels in the main thread. Then, the result is sent to the Operator window inside a <i>GenericSignal</i> object. As both computation effort and the amount of data is limited, and to keep the example code simple, no multithreading is involved in this demo. (For an example that involves multithreading, see <a href="Programming_Reference%253AComplexVisualizationDemo_Signal_Processing.html" title="Programming Reference:ComplexVisualizationDemo Signal Processing">Programming Reference:ComplexVisualizationDemo Signal Processing</a>.)
</p>
<h3><span class="mw-headline" id="Declaration_of_internal_variables">Declaration of internal variables</span></h3>
<p>The code example uses a pointer to an internal private <tt>struct</tt> to hide implementation details from the outer header file of the filter class (PIMPL idiom).
</p><p>A <tt>VisualizationObject</tt> class is declared that contains all members necessary to compute an <span class="mwe-math-element"><span class="mwe-math-mathml-inline mwe-math-mathml-a11y" style="display: none;"><math xmlns="http://www.w3.org/1998/Math/MathML"  alttext="{\displaystyle r^{2}}">
  <semantics>
    <mrow class="MJX-TeXAtom-ORD">
      <mstyle displaystyle="true" scriptlevel="0">
        <msup>
          <mi>r</mi>
          <mrow class="MJX-TeXAtom-ORD">
            <mn>2</mn>
          </mrow>
        </msup>
      </mstyle>
    </mrow>
    <annotation encoding="application/x-tex">{\displaystyle r^{2}}</annotation>
  </semantics>
</math></span><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/a363a15442d031416d1eb62254a9c726e3f6c66c" class="mwe-math-fallback-image-inline" aria-hidden="true" style="vertical-align: -0.338ex; width:2.103ex; height:2.676ex;" alt="{\displaystyle r^{2}}"/></span> value, and to send it to a visualization window.
</p>
<div class="mw-highlight mw-highlight-lang-cpp mw-content-ltr" dir="ltr"><pre><span></span><span class="k">struct</span><span class="w"> </span><span class="nc">VisualizationContainerDemoFilter</span><span class="o">::</span><span class="n">Private</span>
<span class="p">{</span>
<span class="w">    </span><span class="n">GenericVisualization</span><span class="w"> </span><span class="n">mContainerVis</span><span class="p">;</span>

<span class="w">    </span><span class="k">class</span><span class="w"> </span><span class="nc">VisualizationObject</span><span class="p">;</span>
<span class="w">    </span><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">VisualizationObject</span><span class="w"> </span><span class="o">*&gt;</span><span class="w"> </span><span class="n">mVisualizations</span><span class="p">;</span>

<span class="w">    </span><span class="o">~</span><span class="n">Private</span><span class="p">()</span>
<span class="w">    </span><span class="p">{</span>
<span class="w">        </span><span class="n">destroyVisualizations</span><span class="p">();</span>
<span class="w">    </span><span class="p">}</span>
<span class="w">    </span><span class="c1">// Creates visualization objects for pairs of channels.</span>
<span class="w">    </span><span class="kt">void</span><span class="w"> </span><span class="n">createVisualizations</span><span class="p">(</span><span class="k">const</span><span class="w"> </span><span class="n">SignalProperties</span><span class="w"> </span><span class="o">&amp;</span><span class="p">);</span>
<span class="w">    </span><span class="c1">// Destroys all visualization objects.</span>
<span class="w">    </span><span class="kt">void</span><span class="w"> </span><span class="nf">destroyVisualizations</span><span class="p">();</span>
<span class="w">    </span><span class="c1">// Sets visualizations to their initial state.</span>
<span class="w">    </span><span class="kt">void</span><span class="w"> </span><span class="nf">resetVisualizations</span><span class="p">();</span>
<span class="w">    </span><span class="c1">// Computes data values, and updates visualization windows.</span>
<span class="w">    </span><span class="kt">void</span><span class="w"> </span><span class="nf">updateVisualizations</span><span class="p">(</span><span class="k">const</span><span class="w"> </span><span class="n">GenericSignal</span><span class="w"> </span><span class="o">&amp;</span><span class="p">);</span>

<span class="w">    </span><span class="k">class</span><span class="w"> </span><span class="nc">VisualizationObject</span>
<span class="w">    </span><span class="p">{</span>
<span class="w">      </span><span class="k">public</span><span class="o">:</span>
<span class="w">        </span><span class="n">VisualizationObject</span><span class="p">(</span><span class="k">const</span><span class="w"> </span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="w"> </span><span class="o">&amp;</span><span class="n">visID</span><span class="p">);</span>
<span class="w">        </span><span class="o">~</span><span class="n">VisualizationObject</span><span class="p">();</span>
<span class="w">        </span><span class="kt">void</span><span class="w"> </span><span class="nf">setTitle</span><span class="p">(</span><span class="k">const</span><span class="w"> </span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="w"> </span><span class="o">&amp;</span><span class="p">);</span>
<span class="w">        </span><span class="kt">void</span><span class="w"> </span><span class="nf">configureSignal</span><span class="p">(</span><span class="k">const</span><span class="w"> </span><span class="n">SignalProperties</span><span class="o">&amp;</span><span class="p">);</span>
<span class="w">        </span><span class="kt">void</span><span class="w"> </span><span class="nf">setPosition</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">row</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">col</span><span class="p">);</span>
<span class="w">        </span><span class="kt">void</span><span class="w"> </span><span class="nf">reset</span><span class="p">();</span>
<span class="w">        </span><span class="kt">void</span><span class="w"> </span><span class="nf">update</span><span class="p">(</span><span class="k">const</span><span class="w"> </span><span class="n">GenericSignal</span><span class="w"> </span><span class="o">&amp;</span><span class="p">);</span>

<span class="w">        </span><span class="k">struct</span><span class="w"> </span><span class="nc">Computation</span>
<span class="w">        </span><span class="p">{</span>
<span class="w">            </span><span class="kt">int</span><span class="w"> </span><span class="n">inputCh1</span><span class="p">,</span><span class="w"> </span><span class="n">inputCh2</span><span class="p">;</span>
<span class="w">            </span><span class="kt">double</span><span class="w"> </span><span class="n">result</span><span class="p">;</span>
<span class="w">            </span><span class="c1">// run() is called whenever a new signal arrives.</span>
<span class="w">            </span><span class="kt">void</span><span class="w"> </span><span class="nf">run</span><span class="p">(</span><span class="k">const</span><span class="w"> </span><span class="n">GenericSignal</span><span class="w"> </span><span class="o">&amp;</span><span class="p">);</span>
<span class="w">        </span><span class="p">}</span><span class="w"> </span><span class="n">mComputation</span><span class="p">;</span>

<span class="w">      </span><span class="k">private</span><span class="o">:</span>
<span class="w">        </span><span class="n">GenericVisualization</span><span class="w"> </span><span class="n">mVis</span><span class="p">;</span>
<span class="w">        </span><span class="n">GenericSignal</span><span class="w"> </span><span class="n">mSignal</span><span class="p">;</span>
<span class="w">        </span><span class="n">PhysicalUnit</span><span class="w"> </span><span class="n">mSampleUnit</span><span class="p">,</span><span class="w"> </span><span class="n">mValueUnit</span><span class="p">;</span>
<span class="w">        </span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="w"> </span><span class="n">mTitle</span><span class="p">;</span>
<span class="w">        </span><span class="kt">int</span><span class="w"> </span><span class="n">mRow</span><span class="p">,</span><span class="w"> </span><span class="n">mCol</span><span class="p">;</span>
<span class="w">    </span><span class="p">};</span>
<span class="p">};</span>
</pre></div>
<h3><span id="VisualizationObject::update.28.29"></span><span class="mw-headline" id="VisualizationObject::update()"><tt>VisualizationObject::update()</tt></span></h3>
<p>This function computes the correlation matrix element, and sends it to the visualization display wrapped into a <i>GenericSignal</i> object.
</p>
<div class="mw-highlight mw-highlight-lang-cpp mw-content-ltr" dir="ltr"><pre><span></span><span class="kt">void</span>
<span class="nf">VisualizationContainerDemoFilter::Private::VisualizationObject::update</span><span class="p">(</span><span class="k">const</span><span class="w"> </span><span class="n">GenericSignal</span><span class="o">&amp;</span><span class="w"> </span><span class="n">Input</span><span class="p">)</span>
<span class="p">{</span>
<span class="w">    </span><span class="n">mComputation</span><span class="p">.</span><span class="n">run</span><span class="p">(</span><span class="n">Input</span><span class="p">);</span>
<span class="w">    </span><span class="n">mSignal</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">mComputation</span><span class="p">.</span><span class="n">result</span><span class="p">;</span>
<span class="w">    </span><span class="n">mVis</span><span class="p">.</span><span class="n">Send</span><span class="p">(</span><span class="n">mSignal</span><span class="p">);</span>
<span class="p">}</span>
</pre></div>
<h3><span id="VisualizationObject::reset.28.29"></span><span class="mw-headline" id="VisualizationObject::reset()"><tt>VisualizationObject::reset()</tt></span></h3>
<p>This function resets the visualization window's position and size before sending an empty signal to the Operator 
(this will enforce creation of the visualization display on the Operator side).
</p>
<div class="mw-highlight mw-highlight-lang-cpp mw-content-ltr" dir="ltr"><pre><span></span><span class="kt">void</span>
<span class="nf">VisualizationContainerDemoFilter::Private::VisualizationObject::reset</span><span class="p">()</span>
<span class="p">{</span>
<span class="w">    </span><span class="c1">// reset position and size</span>
<span class="w">    </span><span class="n">mVis</span><span class="p">.</span><span class="n">Send</span><span class="p">(</span><span class="n">CfgID</span><span class="o">::</span><span class="n">PlacementVis</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;CNTR&quot;</span><span class="p">);</span>
<span class="w">    </span><span class="n">mVis</span><span class="p">.</span><span class="n">Send</span><span class="p">(</span><span class="n">CfgID</span><span class="o">::</span><span class="n">PlacementRow</span><span class="p">,</span><span class="w"> </span><span class="n">mRow</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mi">1</span><span class="p">);</span><span class="w"> </span><span class="c1">// rows are one-based</span>
<span class="w">    </span><span class="n">mVis</span><span class="p">.</span><span class="n">Send</span><span class="p">(</span><span class="n">CfgID</span><span class="o">::</span><span class="n">PlacementCol</span><span class="p">,</span><span class="w"> </span><span class="n">mCol</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mi">1</span><span class="p">);</span><span class="w"> </span><span class="c1">// columns are one-based</span>
<span class="w">    </span><span class="n">mVis</span><span class="p">.</span><span class="n">Send</span><span class="p">(</span><span class="n">CfgID</span><span class="o">::</span><span class="n">Visible</span><span class="p">,</span><span class="w"> </span><span class="nb">true</span><span class="p">);</span>
<span class="w">    </span><span class="n">mVis</span><span class="p">.</span><span class="n">Send</span><span class="p">(</span><span class="n">CfgID</span><span class="o">::</span><span class="n">FixedScale</span><span class="p">,</span><span class="w"> </span><span class="nb">true</span><span class="p">);</span>
<span class="w">    </span><span class="n">mVis</span><span class="p">.</span><span class="n">Send</span><span class="p">(</span><span class="n">CfgID</span><span class="o">::</span><span class="n">MinValue</span><span class="p">,</span><span class="w"> </span><span class="n">mValueUnit</span><span class="p">.</span><span class="n">RawMin</span><span class="p">());</span>
<span class="w">    </span><span class="n">mVis</span><span class="p">.</span><span class="n">Send</span><span class="p">(</span><span class="n">CfgID</span><span class="o">::</span><span class="n">MaxValue</span><span class="p">,</span><span class="w"> </span><span class="n">mValueUnit</span><span class="p">.</span><span class="n">RawMax</span><span class="p">()</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="mf">1.1</span><span class="p">);</span>
<span class="w">    </span><span class="n">mVis</span><span class="p">.</span><span class="n">Send</span><span class="p">(</span><span class="n">CfgID</span><span class="o">::</span><span class="n">ShowStatusBar</span><span class="p">,</span><span class="w"> </span><span class="nb">false</span><span class="p">);</span>
<span class="w">    </span><span class="n">mVis</span><span class="p">.</span><span class="n">Send</span><span class="p">(</span><span class="n">CfgID</span><span class="o">::</span><span class="n">SampleUnit</span><span class="p">,</span><span class="w"> </span><span class="n">mSampleUnit</span><span class="p">.</span><span class="n">RawToPhysical</span><span class="p">(</span><span class="mi">1</span><span class="p">));</span>
<span class="w">    </span><span class="n">mVis</span><span class="p">.</span><span class="n">Send</span><span class="p">(</span><span class="n">CfgID</span><span class="o">::</span><span class="n">ShowYTicks</span><span class="p">,</span><span class="w"> </span><span class="nb">false</span><span class="p">);</span>
<span class="w">    </span><span class="n">LabelList</span><span class="w"> </span><span class="n">markers</span><span class="p">;</span>
<span class="w">    </span><span class="n">markers</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">Label</span><span class="p">(</span><span class="n">mValueUnit</span><span class="p">.</span><span class="n">PhysicalToRaw</span><span class="p">(</span><span class="s">&quot;1&quot;</span><span class="p">),</span><span class="w"> </span><span class="s">&quot;1|red|-|0.5&quot;</span><span class="p">));</span>
<span class="w">    </span><span class="n">markers</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">Label</span><span class="p">(</span><span class="n">mValueUnit</span><span class="p">.</span><span class="n">PhysicalToRaw</span><span class="p">(</span><span class="s">&quot;0.5&quot;</span><span class="p">),</span><span class="w"> </span><span class="s">&quot;0.5|green|-.|0.5&quot;</span><span class="p">));</span>
<span class="w">    </span><span class="n">mVis</span><span class="p">.</span><span class="n">Send</span><span class="p">(</span><span class="n">CfgID</span><span class="o">::</span><span class="n">YAxisMarkers</span><span class="p">,</span><span class="w"> </span><span class="n">markers</span><span class="p">);</span>
<span class="w">    </span><span class="n">mVis</span><span class="p">.</span><span class="n">Send</span><span class="p">(</span><span class="n">CfgID</span><span class="o">::</span><span class="n">WindowTitle</span><span class="p">,</span><span class="w"> </span><span class="n">mTitle</span><span class="p">);</span>
<span class="w">    </span><span class="n">mVis</span><span class="p">.</span><span class="n">Send</span><span class="p">(</span><span class="n">CfgID</span><span class="o">::</span><span class="n">WindowFrame</span><span class="p">,</span><span class="w"> </span><span class="nb">true</span><span class="p">);</span>
<span class="w">    </span><span class="n">mVis</span><span class="p">.</span><span class="n">Send</span><span class="p">(</span><span class="n">GenericSignal</span><span class="p">());</span>
<span class="p">}</span>
</pre></div>
<h3><span id="Process.28.29_function"></span><span class="mw-headline" id="Process()_function"><tt>Process()</tt> function</span></h3>
<p>The <tt>Process()</tt> function calls <tt>updateVisualizations()</tt>, which, in turn, will call <tt>VisualizationObject::update()</tt> for each visualization object contained in <tt>mVisualizations</tt>.
</p>
<div class="mw-highlight mw-highlight-lang-cpp mw-content-ltr" dir="ltr"><pre><span></span><span class="kt">void</span><span class="w"> </span><span class="nf">VisualizationContainerDemoFilter::Process</span><span class="p">(</span>
<span class="w">  </span><span class="k">const</span><span class="w"> </span><span class="n">GenericSignal</span><span class="o">&amp;</span><span class="w"> </span><span class="n">Input</span><span class="p">,</span>
<span class="w">        </span><span class="n">GenericSignal</span><span class="o">&amp;</span><span class="w"> </span><span class="n">Output</span><span class="p">)</span>
<span class="p">{</span>
<span class="w">    </span><span class="n">Output</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Input</span><span class="p">;</span>
<span class="w">    </span><span class="n">p</span><span class="o">-&gt;</span><span class="n">updateVisualizations</span><span class="p">(</span><span class="n">Input</span><span class="p">);</span>
<span class="p">}</span>
</pre></div>
<h3><span id="StartRun.28.29_and_StopRun.28.29"></span><span class="mw-headline" id="StartRun()_and_StopRun()"><tt>StartRun()</tt> and <tt>StopRun()</tt></span></h3>
<p>These reset all visualization objects.
</p>
<div class="mw-highlight mw-highlight-lang-cpp mw-content-ltr" dir="ltr"><pre><span></span><span class="kt">void</span><span class="w"> </span>
<span class="nf">VisualizationContainerDemoFilter::StartRun</span><span class="p">()</span>
<span class="p">{</span>
<span class="w">    </span><span class="n">p</span><span class="o">-&gt;</span><span class="n">resetVisualizations</span><span class="p">();</span>
<span class="p">}</span>

<span class="kt">void</span>
<span class="nf">VisualizationContainerDemoFilter::StopRun</span><span class="p">()</span>
<span class="p">{</span>
<span class="w">    </span><span class="n">p</span><span class="o">-&gt;</span><span class="n">resetVisualizations</span><span class="p">();</span>
<span class="p">}</span>
</pre></div>
<h2><span class="mw-headline" id="See_also">See also</span></h2>
<p><a href="Programming_Reference%253AGraphDisplay_Class.html" title="Programming Reference:GraphDisplay Class">Programming Reference:GraphDisplay Class</a>, <a href="Programming_Reference%253AGenericVisualization_Class.html" title="Programming Reference:GenericVisualization Class">Programming Reference:GenericVisualization Class</a>, <a href="Programming_Reference%253AVisualizationDemo_Signal_Processing.html" title="Programming Reference:VisualizationDemo Signal Processing">Programming Reference:VisualizationDemo Signal Processing</a>, <a href="Programming_Reference%253AComplexVisualizationDemo_Signal_Processing.html" title="Programming Reference:ComplexVisualizationDemo Signal Processing">Programming Reference:ComplexVisualizationDemo Signal Processing</a>, <a href="Technical_Reference%253AVisualization_Properties.html" title="Technical Reference:Visualization Properties">Technical Reference:Visualization Properties</a>
</p>
<!-- 
NewPP limit report
Cached time: 20241129160648
Cache expiry: 86400
Reduced expiry: false
Complications: [show‐toc]
CPU time usage: 0.184 seconds
Real time usage: 0.215 seconds
Preprocessor visited node count: 70/1000000
Post‐expand include size: 0/2097152 bytes
Template argument size: 0/2097152 bytes
Highest expansion depth: 2/100
Expensive parser function count: 0/100
Unstrip recursion depth: 0/20
Unstrip post‐expand size: 16789/5000000 bytes
-->
<!--
Transclusion expansion time report (%,ms,calls,template)
100.00%    0.000      1 -total
-->

<!-- Saved in parser cache with key wikidb-bci_:pcache:idhash:2573-0!canonical and timestamp 20241129160648 and revision id 10427.
 -->
</div></div><div class="printfooter">
Retrieved from "<a dir="ltr" href="http://www.bci2000.org/mediawiki/index.php?title=Programming_Reference:VisualizationContainerDemo_Signal_Processing&amp;oldid=10427">http://www.bci2000.org/mediawiki/index.php?title=Programming_Reference:VisualizationContainerDemo_Signal_Processing&amp;oldid=10427</a>"</div>
 </div>
</body>
</html>