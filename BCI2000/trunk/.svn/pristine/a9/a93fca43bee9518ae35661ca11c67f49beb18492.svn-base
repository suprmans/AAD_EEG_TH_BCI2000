<!DOCTYPE html>
<html lang="en" dir="ltr">
<head>
<meta charset="UTF-8"/>
<title>User Tutorial:UnityBCI2000 Barebones - BCI2000 Help</title>
<link rel='shortcut icon' href='../../rsrc/favicon.ico' />
<style type='text/css'>
html { font-size:95%; font-family:arial,helvetica,sans-serif }
.printfooter { display:none }
#tocmain { font-size:81%; font-weight:bold; color:grey; background-color:white; border:1px solid black; padding:1em; z-index:10; position:fixed; left:-1px; top:-1px; width:150px; }
#tocmain a { color:black; text-decoration:none }
#tocmain ul { margin:0 0 0 0.4em; padding:0.1em 0 0 0.1em; list-style-position:outside; list-style-type:disc }
#tocmain li { text-indent:0; margin:0 0 0 1em; padding: 0 0 0 0 }
#tocmain p { margin:0; padding:0.1em 0 0 0.1em }
#tocmain .toc1 { margin-left:1.25em; }
#tocmain .toc2 { margin-left:2.25em; }
#tocmain .toc3 { margin-left:3.25em; }
#article { font-size:91%; position:absolute; left:200px; right:0; padding:1em; margin:0 }
</style>
</head>
<body>
 <div id='tocmain'>
 <a href='Main_Page.html'><img src='../../rsrc/bci2000logo.svg' alt='[Main Page]' /></a> <hr class="sep" /><p class="toc0"><a href="User_Tutorial%253ABCI2000_Tour.html">GettingStarted</a></p><ul><li class="toc1"><a href="User_Tutorial%253ABCI2000_Tour.html">Tour</a></li><li class="toc1"><a href="User_Tutorial%253AMu_Rhythm_BCI_Tutorial.html">Mu Tutorial</a></li><li class="toc1"><a href="User_Tutorial%253AP300_BCI_Tutorial.html">P300 Tutorial</a></li></ul><p class="toc0"><a href="User_Reference%253AContents.html">User Manual</a></p><ul></ul><p class="toc0"><a href="Technical_Reference%253AContents.html">Technical Reference</a></p><ul></ul><p class="toc0"><a href="Programming_Reference%253AContents.html">Programming Manual</a></p><ul></ul><p class="toc0"><a href="Contributions%253AContents.html">Contributions</a></p><ul></ul><hr class="sep" /><p class="toc0"><a href="BCI2000_Glossary.html">BCI2000 Glossary</a></p> </div>
 <div id='article'>
 <h1 class = "pagetitle">UnityBCI2000 Barebones</h1>
 <p class = "subtitle">User Tutorial</p>
 <hr class = "sep" />
 <div id="mw-content-text" class="mw-body-content mw-content-ltr" lang="en" dir="ltr"><div class="mw-parser-output"><pre style="color:red">Red text blocks contain detailed instructions for the higher-level instructions preceding them.
</pre>
<p>This tutorial goes over how to use BCI2000 as a logging service for an existing Unity project. For a more comprehensive tutorial on integrating Unity with BCI2000, see <a href="User_Tutorial%253AUnityBCI2000.html" title="User Tutorial:UnityBCI2000">User Tutorial:UnityBCI2000</a>. This tutorial will use a sample Unity project, the same as the full tutorial.
</p>
<div id="toc" class="toc" role="navigation" aria-labelledby="mw-toc-heading"><input type="checkbox" role="button" id="toctogglecheckbox" class="toctogglecheckbox" style="display:none" /><div class="toctitle" lang="en" dir="ltr"><h2 id="mw-toc-heading">Contents</h2><span class="toctogglespan"><label class="toctogglelabel" for="toctogglecheckbox"></label></span></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="User_Tutorial%253AUnityBCI2000_Barebones.html#Download_Unity"><span class="tocnumber">1</span> <span class="toctext">Download Unity</span></a></li>
<li class="toclevel-1 tocsection-2"><a href="User_Tutorial%253AUnityBCI2000_Barebones.html#Setting_Up_BCI2000"><span class="tocnumber">2</span> <span class="toctext">Setting Up BCI2000</span></a></li>
<li class="toclevel-1 tocsection-3"><a href="User_Tutorial%253AUnityBCI2000_Barebones.html#Setting_Up_UnityBCI2000"><span class="tocnumber">3</span> <span class="toctext">Setting Up UnityBCI2000</span></a></li>
<li class="toclevel-1 tocsection-4"><a href="User_Tutorial%253AUnityBCI2000_Barebones.html#Download_Tutorial_Project"><span class="tocnumber">4</span> <span class="toctext">Download Tutorial Project</span></a></li>
<li class="toclevel-1 tocsection-5"><a href="User_Tutorial%253AUnityBCI2000_Barebones.html#Opening_the_project"><span class="tocnumber">5</span> <span class="toctext">Opening the project</span></a></li>
<li class="toclevel-1 tocsection-6"><a href="User_Tutorial%253AUnityBCI2000_Barebones.html#Adding_UnityBCI2000_to_the_project"><span class="tocnumber">6</span> <span class="toctext">Adding UnityBCI2000 to the project</span></a></li>
<li class="toclevel-1 tocsection-7"><a href="User_Tutorial%253AUnityBCI2000_Barebones.html#Configuring_UnityBCI2000"><span class="tocnumber">7</span> <span class="toctext">Configuring UnityBCI2000</span></a></li>
<li class="toclevel-1 tocsection-8"><a href="User_Tutorial%253AUnityBCI2000_Barebones.html#Setting_References"><span class="tocnumber">8</span> <span class="toctext">Setting References</span></a></li>
<li class="toclevel-1 tocsection-9"><a href="User_Tutorial%253AUnityBCI2000_Barebones.html#Adding_Events"><span class="tocnumber">9</span> <span class="toctext">Adding Events</span></a></li>
<li class="toclevel-1 tocsection-10"><a href="User_Tutorial%253AUnityBCI2000_Barebones.html#Reading_the_control_signal"><span class="tocnumber">10</span> <span class="toctext">Reading the control signal</span></a></li>
<li class="toclevel-1 tocsection-11"><a href="User_Tutorial%253AUnityBCI2000_Barebones.html#Sending_events_back_to_BCI2000"><span class="tocnumber">11</span> <span class="toctext">Sending events back to BCI2000</span></a></li>
<li class="toclevel-1 tocsection-12"><a href="User_Tutorial%253AUnityBCI2000_Barebones.html#Unity_Player_Settings"><span class="tocnumber">12</span> <span class="toctext">Unity Player Settings</span></a></li>
<li class="toclevel-1 tocsection-13"><a href="User_Tutorial%253AUnityBCI2000_Barebones.html#Usage"><span class="tocnumber">13</span> <span class="toctext">Usage</span></a></li>
</ul>
</div>

<h3><span class="mw-headline" id="Download_Unity">Download Unity</span></h3>
<p>Download Unity Hub from <a rel="nofollow" class="external text" href="https://unity3d.com">Unity</a>.
</p>
<h3><span class="mw-headline" id="Setting_Up_BCI2000">Setting Up BCI2000</span></h3>
<p>Follow the instructions starting with <a rel="nofollow" class="external autonumber" href="Programming_Howto%253AInstall_Prerequisites.html">[1]</a> to download BCI2000. 
</p>
<h3><span class="mw-headline" id="Setting_Up_UnityBCI2000">Setting Up UnityBCI2000</span></h3>
<p>Download UnityBCI2000 from its GitHub page, <a rel="nofollow" class="external autonumber" href="https://github.com/neurotechcenter/UnityBCI2000">[2]</a>. 
</p>
<pre style="color:red">Click on the "Releases" section on the right side of the page. This tutorial is intended to be used with UnityBCI2000 version 2.0.0, so scroll to that release and click on the files BCI2000RemoteNETStandard.dll and UnityBCI2000.cs to download them.
</pre>
<h3><span class="mw-headline" id="Download_Tutorial_Project">Download Tutorial Project</span></h3>
<p>Download the CursorTask3 repository from <a rel="nofollow" class="external text" href="https://github.com/Personator01/CursorTask3">GitHub</a>.
</p>
<pre style="color:red">Either:
	-Clone the git repository
	-Download the respository directly from GitHub
		-&gt; Click the green "Code" button 
		-&gt; Select "Download ZIP"
		-&gt; Extract the zip file
</pre>
<p>The download directory contains two versions of the CursorTask3 project. One, CursorTask3-BCI2K, contains an example implementation of the task with BCI2000 integration. The other, CursorTask3-NoBCI2K, contains the same task without BCI2000 integration. This tutorial is a step by step guide on turning that second project into the first. 
</p>
<h3><span class="mw-headline" id="Opening_the_project">Opening the project</span></h3>
<p>Open the project in the Unity Editor, and open the CursorTask scene.
</p>
<pre style="color:red">Open Unity Hub.
Click the "Add" button in the top right corner.
Navigate to the CursorTask3 directory downloaded previously.
Select the CursorTask3-NoBCI2K directory to add it to Unity Hub.
Click the CursorTask3-NoBCI2K project in the Unity Hub.
If prompted to select a version of Unity to use or install, select Unity 2022.3. The specific release number of Unity 2022.3 should not matter, so select the one labeled "LTS" for consistency.
The lower panel (the asset browser) should already show the Assets/Scenes directory, which contains a single scene called SampleScene.
Double-click SampleScene. This should open a scene with a box containing various lights and objects.
</pre>
<p>If you wish to view the completed implementation, repeat these steps, but instead open the CursorTask3-BCI2K-Barebones directory. Note that in order to use the completed implementation, you will still need to set the Operator Path value of the UnityBCI2000 component of the BCI2000 game object.
</p>
<h3><span class="mw-headline" id="Adding_UnityBCI2000_to_the_project">Adding UnityBCI2000 to the project</span></h3>
<p>Add BCI2000RemoteNETStandard.dll and UnityBCI2000.cs to your project's assets.
</p>
<pre style="color:red">In the Unity Editor's menu bar, click Assets &gt; Open Containing Folder to open your project directory.
Place the BCI2000RemoteNETStandard.dll and UnityBCI2000.cs files in the Assets folder.
</pre>
<p>Add an empty GameObject called 'BCI2000'. This will hold the scripts for controlling BCI2000. 
</p>
<pre style="color:red">In the Unity Editor's menu bar, click GameObject &gt; Create Empty to create an empty GameObject, and name it 'BCI2000'. (The object's specific name does not actually matter, it is only needed in order to reference it within other scripts)
You will notice that it now appears in the Scene Hierarchy panel, on the left side of the screen.
</pre>
<p>Add the UnityBCI2000 component to the object.
</p>
<pre style="color:red">Click on the object in the Hierarchy panel. This will open it in the Inspector panel (the panel on the right side of the screen)
In the inspector, below the new object's Transform component, click the "Add Component" button, which will open up a small window for adding components.
Within this window, select Scripts &gt; Unity BCI2000 to add the UnityBCI2000 component.
</pre>
<h3><span class="mw-headline" id="Configuring_UnityBCI2000">Configuring UnityBCI2000</span></h3>
<p>The inspector panel now contains the configuration options for UnityBCI2000. Set the options as follows:
</p><p><code>Start Local Operator</code>: Checked
</p><p>This will start the operator on your computer when the Unity scene initializes. If we were instead connecting to an already-running instance of BCI2000, or an instance on another computer, this box would be deselected.
</p><p><code>Operator Path</code>: The path to the Operator executable. This will look something like this on Windows (C://path/to/bci2000/prog/Operator.exe)
</p><p><code>Operator Address</code>: 127.0.0.1
</p><p>This is the address of the machine on which BCI2000 is running. Since we are running BCI2000 on the same computer as Unity, we leave it as 127.0.0.1, the loopback address.
</p><p><code>Operator Port</code>: 3999
</p><p>This is the port on which BCI2000 is listening for commands. By default, it is 3999.
</p><p><code>Start Modules</code>: Checked
</p><p>This tells BCI2000 to start the requested Signal Source, Signal Processing, and Application modules when the Unity scene initializes. Similarly to Start Local Operator, we would deselect this box if connecting to an already-running instance. 
</p><p><code>Start With Scene</code>: Checked
</p><p>This tells BCI2000 to start a data collection run when the scene starts. Since we will be using BCI2000 itself to set experiment parameters, we will instead wait for BCI2000 to start from Unity, and thus will leave the box unchecked. 
</p><p><code>Stop With Scene</code>: Checked
</p><p>This tells BCI2000 to stop collecting data when the scene stops. Since we will be controlling BCI2000 directly, rather than entirely through Unity, we will leave this unchecked.
</p><p><code>Shutdown With Scene</code>: Unchecked
</p><p>This tells BCI2000 to shut down alongside the Unity scene. Whether or not this value is set ultimately doesn't matter much, especially if Start Local Operator is checked. The data will be saved whether or not BCI2000 shuts down. 
</p><p><code>Module 1</code>: SignalGenerator
</p><p>The signal source module to start. We will use SignalGenerator, which generates a signal without any connected hardware.
</p><p><code>Module 2</code>: DummySignalProcessing
</p><p>The signal processing module to start. We will use DummySignalProcessing, as there is no processing to do.
</p><p><code>Module 3</code>: DummyApplication
</p><p>The Application module to start. Since we are using Unity, we will use DummyApplication.
</p><p><br />
</p>
<h3><span class="mw-headline" id="Setting_References">Setting References</span></h3>
<p>In order for the game's scripts to communicate with BCI2000, they need to hold a reference to the UnityBCI2000 component.
There are three scripts which will need to communicate with BCI2000. They are <code>GameControl.cs, BallControl.cs, and MCursorControl.cs</code>.
These scripts are each located within the Assets directory of the Unity project. 
</p>
<pre style="color:red">As before, select Assets &gt; Open Containing Folder to open the project directory, then open the Assets folder. 
For each script, open it in a text editor.
Add a data member of type UnityBCI2000 to the class, like so:
	UnityBCI2000 bci;
Place the member definition above the Awake() method, for readability.
Within the Awake() method, set this reference to the UnityBCI2000 component.
	bci = GameObject.Find("BCI2000").GetComponent&lt;UnityBCI2000&gt;();
</pre>
<p>Each of the three scripts should contain a section like this:
</p>
<pre>	...
	UnityBCI2000 bci;
	void Awake() {
		bci = GameObject.Find("BCI2000").GetComponent&lt;UnityBCI2000&gt;();
		...
</pre>
<h3><span class="mw-headline" id="Adding_Events">Adding Events</span></h3>
<p><a rel="nofollow" class="external text" href="Programming_Reference%253AEvents.html">Events</a> are the primary way that non-signal experiment data is recorded in BCI2000. They are timestamped integer values which are encoded alongside the signal data in BCI2000 output files. Due to BCI2000's design, events must be added during a very specific part of its startup sequence, which is immediately after the BCI2000 operator starts, and before any of the modules start. As such, we cannot simply call <code>AddEvent()</code> whenever we want. Furthermore, the order in which Unity objects initialize is undefined, so it cannot even be guaranteed that calling <code>AddEvent</code> at a specific time will be consistent across multiple projects. As such, UnityBCI2000 provides a couple of methods for sending commands at well-defined points within the startup sequence. These two methods, <code>OnIdle</code> and <code>OnIdle</code> and <code>OnConnected</code> allow BCI2000 commands to be sent while the operator is in the state Idle (immediately before starting its modules) and when the operator is in the state Connected (after starting and connecting to the modules. Below is an example of using those methods to add and show an event in BCI2000.
</p>
<pre>class Script&#160;: MonoBehaviour {
    UnityBCI2000 bci;
    void Awake() {
	bci = GameObject.Find("BCI2000Object").GetComponent&lt;UnityBCI2000&gt;();
	bci.OnIdle(remote =&gt; {
	    remote.AddEvent("AnEvent", 32);
	});
    }
    void Start() {
	bci.OnConnected(remote =&gt; {
	    remote.Visualize("AnEvent");
	}
    }
}
</pre>
<p>As seen above, <code>OnIdle</code> and <code>OnConnected</code> take a delegate (C#'s term for a callback/closure/functor/etc.) with a single parameter of type <code>BCI2000Remote</code> (in this case called "remote"). The lambda expression given to the call to <code>OnIdle</code> uses the method <code>BCI2000Remote.AddEvent()</code> to add an event called "AnEvent" with a bit width of 32 bits. The call to <code>OnConnected</code> tells BCI2000 to show the event's value in a graphical window. A description of the BCI2000Remote class can be found <a rel="nofollow" class="external text" href="Contributions%253ABCI2000RemoteNET.html">here</a>, and API documentation can be found <a rel="nofollow" class="external text" href="https://bci2000.org/BCI2000RemoteNET/netstandard2/classBCI2000RemoteNET_1_1BCI2000Remote.html">here</a>.
</p><p>We will now add the events relevant to the Cursor Task. Open the <code>GameControl.cs</code> script, and modify its <code>Awake()</code> to add the events <code>PreFeedback</code>, <code>Feedback</code>, <code>PostFeedback</code>, <code>TargetHit</code>, and <code>Timeout</code> with bit width 1. Additionally, add the events <code>TrialNumber</code>, <code>TargetPositionX</code>, and <code>TargetPositionY</code> with width 16. These will encode the task state and number of trials.
We also need to set a parameter value so that the signal will be set to the mouse position. Using <code>BCI2000Remote.SetParameter()</code>, we will set the <code>ModulateAmplitude</code> parameter to 1.
</p><p>Open the <code>BallControl.cs</code> script, and within the <code>Awake()</code> function, add events <code>CursorPositionX</code> and <code>CursorPositionY</code>, with width 16. Show these events in a visualization window with <code>Visualize</code>
</p><p>Your two scripts should now look like this: 
</p>
<pre>&gt;&gt;&gt; GameControl.cs 
    ...
    void Awake() {
	...
	bci.OnIdle(remote =&gt; {
	    remote.AddEvent("PreFeedback", 1);
	    remote.AddEvent("Feedback", 1);
	    remote.AddEvent("PostFeedback", 1);
	    remote.AddEvent("TargetHit", 1);
	    remote.AddEvent("Timeout", 1);
	    remote.AddEvent("TrialNumber", 16);
	    remote.AddEvent("TargetPositionX", 16);
	    remote.AddEvent("TargetPositionY", 16);
	    remote.SetParameter("ModulateAmplitude", "1");
	    });
    }

&gt;&gt;&gt; BallControl.cs
    ...
    void Awake() {
	bci.OnIdle(remote =&gt; {
	    remote.AddEvent("CursorPositionX", 16);
	    remote.AddEvent("CursorPositionY", 16);
	    });
	bci.OnConnected(remote =&gt; {
	    remote.Visualize("CursorPositionX");
	    remote.Visualize("CursorPositionY");
    }
</pre>
<h3><span class="mw-headline" id="Reading_the_control_signal">Reading the control signal</span></h3>
<p>We will be using the control signal to control the cursor. Open the <code>MCursorControl.cs</code> script.
</p><p>The commented out section of the <code>GetPos()</code> method contains the code required to turn the control signal waveform coming from the Signal Source and Signal Processing modules into screen coordinates. 
Uncomment the commented part and delete the line <code>Ray r = camera.ScreenPointToRay(Input.MousePosition);</code>.
Change the <code>double signalX = 0;</code> and <code>double signalY = 0;</code> to. 
</p><p>Your <code>GetPos()</code> method should look like this:
</p>
<pre>    Vector3 GetPos() {
	double signalX = bci.Control.GetSignal(1, bci.CurrentSampleOffset());
	double signalY = bci.Control.GetSignal(2, bci.CurrentSampleOffset());
	signalsX[signalIndex] = signalX;
	signalsY[signalIndex] = signalY;
	
	signalIndex = signalIndex + 1 &gt;= rollingMaximumAmount&#160;? 0&#160;: signalIndex + 1;
	double max_x = signalsX.Max();
	double max_y = signalsY.Max();
	Ray r = camera.ScreenPointToRay(new Vector3((float) max_x * Screen.width, (float) max_y * Screen.height, 0));
	float p;
	if (!plane.Raycast(r, out p)) {
	   throw new Exception("error casting ray to plane, invalid mouse position?");
	}
	return r.GetPoint(p);
    }
</pre>
<p>Note the use of the <code>UnityBCI2000.CurrentSampleOffset()</code> method. This is a special method which gets the offset into the current block such that the sample is exactly one block length later than when it was collected by the hardware. This is to normalize the latency between when the hardware collects the signal and the software receives the signal, due to how BCI2000 processes data in blocks.
</p>
<h3><span class="mw-headline" id="Sending_events_back_to_BCI2000">Sending events back to BCI2000</span></h3>
<p>The primary way to communicate game state back to BCI2000 is via the use of Events, which are integer values encoded alongside the signal data.
</p><p>We will send the events that we added in a previous section.
</p><p>First, we will send back the current position of the cursor. Within the <code>BallControl.cs</code> script, within the <code>Update()</code> method, immediately after <code>Move()</code> is called, set the <code>CursorPositionX</code> and <code>CursorPositionY</code> events. 
</p>
<pre>&gt;&gt;&gt; BallControl.cs
void Update() {
    ...
    if (isTrialRunning) {
	...
	Move();
	bci.Control.SetEvent("CursorPositionX", (uint) ((transform.position.x + 7) * 1000));
	bci.Control.SetEvent("CursorPositionY", (uint) ((transform.position.y + 4.5) * 1000));
    }
    ...
</pre>
<p>Notice that we transform the value of the cursor's position. This is because events in BCI2000 are represented as unsigned integers, so, for example, the cursor's range of movement in the x axis, -7 to 7, would not be directly representable within a BCI2000 event, so we add 7 so it is positive, and multiply by 1000 so that we have a more precise measure of the cursor's position. The range of [-7,7] becomes [0,14000].
</p><p><br />
We will also set the events corresponding to the game state within <code>GameControl.cs</code>. First we will set <code>PreFeedback</code>, <code>Feedback</code>, and <code>PostFeedback</code> to represent when the game is in these states. To do this, at the beginning and end of <code>PreTrial()</code>, <code>Trial()</code>, and <code>PostTrial()</code>, we will set the corresponding event values to 1 and 0, respectively.
</p>
<pre>&gt;&gt;&gt; GameControl.cs
IEnumerator PreTrial() {
    bci.Control.SetEvent("PreFeedback", 1);
    ...
    bci.Control.SetEvent("PreFeedback", 0);
}
IEnumerator Trial() {
    bci.Control.SetEvent("Feedback", 1);
    ...
    bci.Control.SetEvent("Feedback", 0);
}
IEnumerator PostTrial() {
    bci.Control.SetEvent("PostFeedback", 1);
    ...
    bci.Control.SetEvent("PostFeedback", 0);
}
</pre>
<p>We will also set the events which happen at the end of each trial. The <code>TargetHit</code> event is activated when the subject hits the target, and the <code>Timeout</code> event is activated when the subject runs out of time.
</p>
<pre>&gt;&gt;&gt; GameControl.cs
IEnumerator Trial() {
    ...
    bci.Control.SetEvent("Feedback", 0);
    if (lastTrialSucceeded) {
	bci.Control.PulseEvent("TargetHit", 1);
    } else {
	bci.Control.PulseEvent("Timeout", 1);
    }
}

Notice that we use &lt;code&gt;BCI2000Remote.PulseEvent()&lt;/code&gt; rather than &lt;code&gt;BCI2000Remote.SetEvent()&lt;/code&gt;. This results in the event being set to the value &lt;code&gt;1&lt;/code&gt; for exactly one sample duration, then returning to zero.

We will also record the position of the target. Similarly to the cursor, we will transform the target's coordinates to be a positive integer.

&lt;pre&gt;
&gt;&gt;&gt; GameControl.cs
IEnumerator PreTrial() {
    ...
    target.SetActive(true);
    bci.Control.SetEvent("TargetPositionX", (uint) ((target.transform.position.x + 7) * 1000));
    bci.Control.SetEvent("TargetPositionY", (uint) ((target.transform.position.y + 4.5) * 1000));
    ...
}
</pre>
<p>The last event we need to set is the trial number.
</p>
<pre>IEnumerator ControlLoop() {
    ...
    while (IsContinue() &amp;&amp; trials &lt; n_trials) {
	bci.Control.SetEvent("TrialNumber", trials + 1);
	...
    }
}
</pre>
<h3><span class="mw-headline" id="Unity_Player_Settings">Unity Player Settings</span></h3>
<p>Additionally, due to how Unity detects changes in BCI2000 state, it must be allowed to run in the background.
</p>
<pre style="color:red">In the Unity menu bar:
    Edit &gt; Project Settings &gt; Player &gt; Resolution and Presentation
Check the "Run In Background" box.
</pre>
<p><br />
</p>
<h3><span class="mw-headline" id="Usage">Usage</span></h3>
<p>Now, when the Unity application runs, BCI2000 will open and start collecting data.
</p>
<!-- 
NewPP limit report
Cached time: 20241129160940
Cache expiry: 86400
Reduced expiry: false
Complications: [show‐toc]
CPU time usage: 0.022 seconds
Real time usage: 0.023 seconds
Preprocessor visited node count: 124/1000000
Post‐expand include size: 0/2097152 bytes
Template argument size: 0/2097152 bytes
Highest expansion depth: 2/100
Expensive parser function count: 0/100
Unstrip recursion depth: 0/20
Unstrip post‐expand size: 6690/5000000 bytes
-->
<!--
Transclusion expansion time report (%,ms,calls,template)
100.00%    0.000      1 -total
-->

<!-- Saved in parser cache with key wikidb-bci_:pcache:idhash:2709-0!canonical and timestamp 20241129160940 and revision id 11527.
 -->
</div></div><div class="printfooter">
Retrieved from "<a dir="ltr" href="http://www.bci2000.org/mediawiki/index.php?title=User_Tutorial:UnityBCI2000_Barebones&amp;oldid=11527">http://www.bci2000.org/mediawiki/index.php?title=User_Tutorial:UnityBCI2000_Barebones&amp;oldid=11527</a>"</div>
 </div>
</body>
</html>