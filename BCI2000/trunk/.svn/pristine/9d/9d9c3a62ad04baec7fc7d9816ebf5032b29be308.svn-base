////////////////////////////////////////////////////////////////////////////////
// $Id$
// Author: mellinger@neurotechcenter.org
// Description: A Tiny::Thread::ThreadStarter implementation that uses QThread
//   instances as underlying thread objects (instead of std::thread).
//
// $BEGIN_BCI2000_LICENSE$
//
// This file is part of BCI2000, a platform for real-time bio-signal research.
// [ Copyright (C) 2000-2023: BCI2000 team and many external contributors ]
//
// BCI2000 is free software: you can redistribute it and/or modify it under the
// terms of the GNU General Public License as published by the Free Software
// Foundation, either version 3 of the License, or (at your option) any later
// version.
//
// BCI2000 is distributed in the hope that it will be useful, but
//                         WITHOUT ANY WARRANTY
// - without even the implied warranty of MERCHANTABILITY or FITNESS FOR
// A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License along with
// this program.  If not, see <http://www.gnu.org/licenses/>.
//
// $END_BCI2000_LICENSE$
////////////////////////////////////////////////////////////////////////////////
#ifndef QT_THREAD_STARTER
#define QT_THREAD_STARTER

#include <QThread>

#include <mutex>
#include <vector>

#include "Thread.h"

class QtThreadStarter : public Thread::ThreadStarter
{
public:
    ~QtThreadStarter();
    void* StartThread(void* instance, int(Thread::* RunThread)()) const override;
    void DisposeThread(void* handle) const override;

private:
    mutable std::mutex mMutex;
    mutable std::vector<QThread*> mDispose;
};

#endif // QT_THREAD_STARTER
