<!DOCTYPE html>
<html lang="en" dir="ltr">
<head>
<meta charset="UTF-8"/>
<title>Programming Reference:Filter DLLs - BCI2000 Help</title>
<link rel='shortcut icon' href='../../rsrc/favicon.ico' />
<style type='text/css'>
html { font-size:95%; font-family:arial,helvetica,sans-serif }
.printfooter { display:none }
#tocmain { font-size:81%; font-weight:bold; color:grey; background-color:white; border:1px solid black; padding:1em; z-index:10; position:fixed; left:-1px; top:-1px; width:150px; }
#tocmain a { color:black; text-decoration:none }
#tocmain ul { margin:0 0 0 0.4em; padding:0.1em 0 0 0.1em; list-style-position:outside; list-style-type:disc }
#tocmain li { text-indent:0; margin:0 0 0 1em; padding: 0 0 0 0 }
#tocmain p { margin:0; padding:0.1em 0 0 0.1em }
#tocmain .toc1 { margin-left:1.25em; }
#tocmain .toc2 { margin-left:2.25em; }
#tocmain .toc3 { margin-left:3.25em; }
#article { font-size:91%; position:absolute; left:200px; right:0; padding:1em; margin:0 }
</style>
</head>
<body>
 <div id='tocmain'>
 <a href='Main_Page.html'><img src='../../rsrc/bci2000logo.svg' alt='[Main Page]' /></a> <hr class="sep" /><p class="toc0"><a href="User_Tutorial%253ABCI2000_Tour.html">GettingStarted</a></p><ul></ul><p class="toc0"><a href="User_Reference%253AContents.html">User Manual</a></p><ul></ul><p class="toc0"><a href="Technical_Reference%253AContents.html">Technical Reference</a></p><ul></ul><p class="toc0"><a href="Programming_Reference%253AContents.html">Programming Manual</a></p><ul><li class="toc1">Concepts</li><ul><li class="toc2"><a href="Programming_Reference%253AFilter_Chain.html">Filter Chain</a></li><li class="toc2"><a href="Programming_Reference%253ASignals.html">Signals</a></li><li class="toc2"><a href="Programming_Reference%253AError_Handling.html">Error Handling</a></li><li class="toc2"><a href="Programming_Reference%253ALocalization.html">Localization</a></li><li class="toc2"><a href="Programming_Reference%253ARapid_Development.html">Rapid Development</a></li></ul><li class="toc1">Reference</li><ul><li class="toc2"><a href="Programming_Reference%253AGenericFilter_Class.html">GenericFilter</a></li><li class="toc2"><a href="Programming_Reference%253AEnvironment_Class.html">Environment</a></li><li class="toc2"><a href="Programming_Reference%253AGenericVisualization_Class.html">GenericVisualization</a></li><li class="toc2"><a href="Programming_Reference%253AErrors_and_Warnings.html">Errors and Warnings</a></li><li class="toc2"><a href="Programming_Reference%253ADebug_Output.html">Debug Output</a></li></ul><li class="toc1">Data Acquisition</li><ul><li class="toc2"><a href="Programming_Reference%253AGenericADC_Class.html">GenericADC</a></li></ul><li class="toc1">Data Storage</li><ul><li class="toc2"><a href="Programming_Reference%253AGenericFileWriter_Class.html">GenericFileWriter</a></li><li class="toc2"><a href="Programming_Reference%253ABCI2000FileReader_Class.html">BCI2000FileReader</a></li></ul><li class="toc1">Signal Processing</li><ul><li class="toc2"><a href="Programming_Reference%253AIIRFilterBase_Class.html">IIR Filters</a></li></ul><li class="toc1">Application Modules</li><ul><li class="toc2"><a href="Programming_Reference%253AApplicationBase_Class.html">ApplicationBase</a></li><li class="toc2"><a href="Programming_Reference%253AFeedbackTask_Class.html">FeedbackTask</a></li><li class="toc2"><a href="Programming_Reference%253AStimulusTask_Class.html">StimulusTask</a></li><li class="toc2"><a href="Programming_Reference%253A3D_API.html">3D API</a></li></ul><li class="toc1">Howtos</li><ul><li class="toc2"><a href="Programming_Howto%253ABuilding_BCI2000.html">Building BCI2000</a></li><li class="toc2"><a href="Programming_Howto%253ASVN_Client_Setup.html">SVN Client Setup</a></li><li class="toc2"><a href="Programming_Howto%253AUsing_TortoiseSVN.html">Using TortoiseSVN</a></li></ul><li class="toc1"><a href="Programming_FAQ.html">FAQ</a></li><li class="toc1">Tutorials</li><ul><li class="toc2"><a href="Programming_Tutorial%253AImplementing_a_Data_Acquisition_Module.html">Data Acquisition</a></li><li class="toc2"><a href="Programming_Tutorial%253AImplementing_a_Signal_Processing_Filter.html">Signal Processing</a></li><li class="toc2"><a href="Programming_Tutorial%253AImplementing_a_Matlab-based_Filter.html">Matlab Signal Processing</a></li></ul></ul><p class="toc0"><a href="Contributions%253AContents.html">Contributions</a></p><ul></ul><hr class="sep" /><p class="toc0"><a href="BCI2000_Glossary.html">BCI2000 Glossary</a></p> </div>
 <div id='article'>
 <h1 class = "pagetitle">Filter DLLs</h1>
 <p class = "subtitle">Programming Reference</p>
 <hr class = "sep" />
 <div id="mw-content-text" class="mw-body-content mw-content-ltr" lang="en" dir="ltr"><div class="mw-parser-output"><div id="toc" class="toc" role="navigation" aria-labelledby="mw-toc-heading"><input type="checkbox" role="button" id="toctogglecheckbox" class="toctogglecheckbox" style="display:none" /><div class="toctitle" lang="en" dir="ltr"><h2 id="mw-toc-heading">Contents</h2><span class="toctogglespan"><label class="toctogglelabel" for="toctogglecheckbox"></label></span></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="Programming_Reference%253AFilter_DLLs.html#Description"><span class="tocnumber">1</span> <span class="toctext">Description</span></a></li>
<li class="toclevel-1 tocsection-2"><a href="Programming_Reference%253AFilter_DLLs.html#Filter_DLL_interface"><span class="tocnumber">2</span> <span class="toctext">Filter DLL interface</span></a>
<ul>
<li class="toclevel-2 tocsection-3"><a href="Programming_Reference%253AFilter_DLLs.html#const_char*_InterfaceVersion()"><span class="tocnumber">2.1</span> <span class="toctext">const char* InterfaceVersion()</span></a></li>
<li class="toclevel-2 tocsection-4"><a href="Programming_Reference%253AFilter_DLLs.html#const_char*_Compiler()"><span class="tocnumber">2.2</span> <span class="toctext">const char* Compiler()</span></a></li>
<li class="toclevel-2 tocsection-5"><a href="Programming_Reference%253AFilter_DLLs.html#const_char*_BuildType()"><span class="tocnumber">2.3</span> <span class="toctext">const char* BuildType()</span></a></li>
<li class="toclevel-2 tocsection-6"><a href="Programming_Reference%253AFilter_DLLs.html#const_char*_BuildInfo()"><span class="tocnumber">2.4</span> <span class="toctext">const char* BuildInfo()</span></a></li>
<li class="toclevel-2 tocsection-7"><a href="Programming_Reference%253AFilter_DLLs.html#const_char*_FilterName()"><span class="tocnumber">2.5</span> <span class="toctext">const char* FilterName()</span></a></li>
<li class="toclevel-2 tocsection-8"><a href="Programming_Reference%253AFilter_DLLs.html#void_ReleaseString(const_char*)"><span class="tocnumber">2.6</span> <span class="toctext">void ReleaseString(const char*)</span></a></li>
<li class="toclevel-2 tocsection-9"><a href="Programming_Reference%253AFilter_DLLs.html#void_SetBcierr(BCIStream::OutStream*)"><span class="tocnumber">2.7</span> <span class="toctext">void SetBcierr(BCIStream::OutStream*)</span></a></li>
<li class="toclevel-2 tocsection-10"><a href="Programming_Reference%253AFilter_DLLs.html#void_SetBciout(BCIStream::OutStream*)"><span class="tocnumber">2.8</span> <span class="toctext">void SetBciout(BCIStream::OutStream*)</span></a></li>
<li class="toclevel-2 tocsection-11"><a href="Programming_Reference%253AFilter_DLLs.html#void_SetBciwarn(BCIStream::OutStream*)"><span class="tocnumber">2.9</span> <span class="toctext">void SetBciwarn(BCIStream::OutStream*)</span></a></li>
<li class="toclevel-2 tocsection-12"><a href="Programming_Reference%253AFilter_DLLs.html#void_SetBcidbg(BCIStream::OutStream*)"><span class="tocnumber">2.10</span> <span class="toctext">void SetBcidbg(BCIStream::OutStream*)</span></a></li>
<li class="toclevel-2 tocsection-13"><a href="Programming_Reference%253AFilter_DLLs.html#void_SetVisualizationChannel(bci::MessageChannel*)"><span class="tocnumber">2.11</span> <span class="toctext">void SetVisualizationChannel(bci::MessageChannel*)</span></a></li>
<li class="toclevel-2 tocsection-14"><a href="Programming_Reference%253AFilter_DLLs.html#void_SetMeasurementUnits(MeasurementUnits*)"><span class="tocnumber">2.12</span> <span class="toctext">void SetMeasurementUnits(MeasurementUnits*)</span></a></li>
<li class="toclevel-2 tocsection-15"><a href="Programming_Reference%253AFilter_DLLs.html#void_SetEnvironmentContext(Environment::Context*)"><span class="tocnumber">2.13</span> <span class="toctext">void SetEnvironmentContext(Environment::Context*)</span></a></li>
<li class="toclevel-2 tocsection-16"><a href="Programming_Reference%253AFilter_DLLs.html#GenericFilter*_Instantiate(Directory::Node*)"><span class="tocnumber">2.14</span> <span class="toctext">GenericFilter* Instantiate(Directory::Node*)</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-17"><a href="Programming_Reference%253AFilter_DLLs.html#Howto:_Building_your_own_filter_as_a_BCI2000_Filter_DLL"><span class="tocnumber">3</span> <span class="toctext">Howto: Building your own filter as a BCI2000 Filter DLL</span></a></li>
<li class="toclevel-1 tocsection-18"><a href="Programming_Reference%253AFilter_DLLs.html#Debugging_a_filter_DLL"><span class="tocnumber">4</span> <span class="toctext">Debugging a filter DLL</span></a>
<ul>
<li class="toclevel-2 tocsection-19"><a href="Programming_Reference%253AFilter_DLLs.html#Setting_breakpoints_in_the_IDE"><span class="tocnumber">4.1</span> <span class="toctext">Setting breakpoints in the IDE</span></a></li>
<li class="toclevel-2 tocsection-20"><a href="Programming_Reference%253AFilter_DLLs.html#Using_a_SuggestDebugging_statement"><span class="tocnumber">4.2</span> <span class="toctext">Using a SuggestDebugging statement</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-21"><a href="Programming_Reference%253AFilter_DLLs.html#See_also"><span class="tocnumber">5</span> <span class="toctext">See also</span></a></li>
</ul>
</div>

<h2><span class="mw-headline" id="Description">Description</span></h2>
<p>When developing a BCI2000 signal processing filter in C++, it may be useful to compile it into a DLL in addition to adding it to a signal processing module, especially if you are going to test it using the <a href="User_Reference%253ABCI2000Analysis.html" title="User Reference:BCI2000Analysis">BCI2000Analysis</a> tool.
This tool has the standard set of filters built-in but new filters may not easily be added: one would need to add the filter's source file to the tool's CMakeLists.txt, and manually add code that instantiates the new filter and adds it to the filter graph as required.
</p><p>As a solution to this problem, a simple filter DLL interface has been designed that allows to compile filters independently of the BCI2000Analysis tool. As a restriction, it is necessary to build both BCI2000Analysis and filter DLLs with the same compiler, compiler settings, and version. Also, a debug version of BCI2000Analysis may only use filter DLLs that have been compiled in debug mode, and the same applies for release mode builds.
</p><p>To be able to deal with mismatches in compiler and build settings without crashing, the filter DLL interface contains text-based information functions that allow a host process to obtain the relevant information in a safe manner.
</p>
<h2><span class="mw-headline" id="Filter_DLL_interface">Filter DLL interface</span></h2>
<p>The following functions are exported by a BCI2000 filter DLL.
They are declared in <tt>src/shared/filters/FilterWrapperLibrary.h</tt>.
</p>
<h3><span id="const_char.2A_InterfaceVersion.28.29"></span><span class="mw-headline" id="const_char*_InterfaceVersion()">const char* InterfaceVersion()</span></h3>
<p>Returns the interface version at the time when the DLL was built.
In the host process, a string comparison to the value of the <tt>FILTER_WRAPPER_INTERFACE_VERSION</tt> macro will tell you whether the DLL's interface version matches the one that is expected by the host.
</p>
<h3><span id="const_char.2A_Compiler.28.29"></span><span class="mw-headline" id="const_char*_Compiler()">const char* Compiler()</span></h3>
<p>Returns the name of the compiler in a form that can be matched to by the host process.
</p>
<h3><span id="const_char.2A_BuildType.28.29"></span><span class="mw-headline" id="const_char*_BuildType()">const char* BuildType()</span></h3>
<p>Returns the build type, which is one of "Debug", "Release", or "RelWithDebInfo".
</p>
<h3><span id="const_char.2A_BuildInfo.28.29"></span><span class="mw-headline" id="const_char*_BuildInfo()">const char* BuildInfo()</span></h3>
<p>Returns full build configuration info in the form that is visible in GUI applications under <i>Help-&gt;About</i>.
</p>
<h3><span id="const_char.2A_FilterName.28.29"></span><span class="mw-headline" id="const_char*_FilterName()">const char* FilterName()</span></h3>
<p>Returns the filter's name for display purposes.
</p>
<h3><span id="void_ReleaseString.28const_char.2A.29"></span><span class="mw-headline" id="void_ReleaseString(const_char*)">void ReleaseString(const char*)</span></h3>
<p>Call this function on the result of any of the above functions once you are done with it.
</p>
<h3><span id="void_SetBcierr.28BCIStream::OutStream.2A.29"></span><span class="mw-headline" id="void_SetBcierr(BCIStream::OutStream*)">void SetBcierr(BCIStream::OutStream*)</span></h3>
<h3><span id="void_SetBciout.28BCIStream::OutStream.2A.29"></span><span class="mw-headline" id="void_SetBciout(BCIStream::OutStream*)">void SetBciout(BCIStream::OutStream*)</span></h3>
<h3><span id="void_SetBciwarn.28BCIStream::OutStream.2A.29"></span><span class="mw-headline" id="void_SetBciwarn(BCIStream::OutStream*)">void SetBciwarn(BCIStream::OutStream*)</span></h3>
<h3><span id="void_SetBcidbg.28BCIStream::OutStream.2A.29"></span><span class="mw-headline" id="void_SetBcidbg(BCIStream::OutStream*)">void SetBcidbg(BCIStream::OutStream*)</span></h3>
<p>Set the respective stream's output to a BCI2000 <tt>BCIStream::OutStream</tt> object that has been instantiated in the host before.
This way, the host may display error and debugging information originating from the filter contained in the DLL.
</p><p>Specifying <tt>nullptr</tt> will suppress output from that stream.
</p>
<h3><span id="void_SetVisualizationChannel.28bci::MessageChannel.2A.29"></span><span class="mw-headline" id="void_SetVisualizationChannel(bci::MessageChannel*)">void SetVisualizationChannel(bci::MessageChannel*)</span></h3>
<p>Specify a <tt>bci::MessageChannel</tt> object to receive visualization messages from the filter contained in the DLL.
Specifying <tt>nullptr</tt> will suppress visualization output.
</p>
<h3><span id="void_SetMeasurementUnits.28MeasurementUnits.2A.29"></span><span class="mw-headline" id="void_SetMeasurementUnits(MeasurementUnits*)">void SetMeasurementUnits(MeasurementUnits*)</span></h3>
<p>Specify a <tt>MeasurementUnits</tt> object that the filter will use to initialize basic units of measurement, such as the duration of a data block.
Calling this function is crucial for proper function of the filter contained in the DLL.
Such an object is typically existent in a host that uses BCI2000 filters.
</p>
<h3><span id="void_SetEnvironmentContext.28Environment::Context.2A.29"></span><span class="mw-headline" id="void_SetEnvironmentContext(Environment::Context*)">void SetEnvironmentContext(Environment::Context*)</span></h3>
<p>Specify a BCI2000 <tt>Environment::Context</tt> object through which the filter will receive access to its parameters and states.
Such an object is part of the <tt>GenericFilter</tt> chain the filter will be part of.
</p>
<h3><span id="GenericFilter.2A_Instantiate.28Directory::Node.2A.29"></span><span class="mw-headline" id="GenericFilter*_Instantiate(Directory::Node*)">GenericFilter* Instantiate(Directory::Node*)</span></h3>
<p>Create an instance of the filter contained in the DLL.
The argument is the filter's parent node in the filter graph, and may be obtained through its parent filter chain.
</p>
<h2><span class="mw-headline" id="Howto:_Building_your_own_filter_as_a_BCI2000_Filter_DLL">Howto: Building your own filter as a BCI2000 Filter DLL</span></h2>
<p>This howto assumes that you have already created a BCI2000 filter, and added it to the signal processing filter chain.
If this is not the case, you may use the <i>NewBCI2000Module</i> tool located in the <tt>build</tt> directory to do so.
(Note that the <i>NewBCI2000Module</i> tool is not present in the build directory until you have built BCI2000 for the first time.)
</p><p>Once you created your filter, run the <i>NewBCI2000FilterDLL</i> tool from the <tt>build</tt> directory.
It will ask you for the full path to the filter's cpp file, which you may enter manually, or by dragging-and-dropping that cpp file from a Windows Explorer window into the program's console window, and pressing "enter".
</p><p>The <i>NewBCI2000FilterDLL</i> tool will then create a "filterdll" subdirectory with its own <tt>CMakeLists.txt</tt>, and make sure it is included into the build.
</p><p>To use it, run CMake again, and find both your filter's module, and its filter DLL in the IDE's list of projects.
E.g., when your filter's module is located at <tt>src/custom/Foo</tt>, the module will appear at <tt>Custom/Foo</tt>, and its associated filter DLL at <tt>Custom/FooFilterDLL</tt>.
</p><p>When building the filter DLL, a file called <tt>FooFilterDLL.dll</tt> will be created at your BCI2000 installation's <tt>tools/FilterDLLs</tt> directory, ready to be picked up by a filter DLL host such as <a href="User_Reference%253ABCI2000Analysis.html" title="User Reference:BCI2000Analysis">BCI2000Analysis</a>.
</p>
<h2><span class="mw-headline" id="Debugging_a_filter_DLL">Debugging a filter DLL</span></h2>
<p>To debug a filter contained in a DLL, you have two options:
</p>
<h3><span class="mw-headline" id="Setting_breakpoints_in_the_IDE">Setting breakpoints in the IDE</span></h3>
<p>Start up the host (e.g., <i>BCI2000Analysis</i>), and attach a debugger. In the debugger IDE, navigate to your filter's cpp file, and set breakpoints as you see fit. Then, activate the DLL in the host (e.g., by adding a filter DLL node and choosing your filter), and run the filter chain (e.g., by clicking "Run analysis"). Execution should stop when any of the breakpoints is hit.
</p>
<h3><span class="mw-headline" id="Using_a_SuggestDebugging_statement">Using a <tt>SuggestDebugging</tt> statement</span></h3><p>
In your filter's cpp file, include <tt>Debugging.h</tt>, and add a line </p><pre>SuggestDebugging &lt;&lt; "Foo";</pre><p> anywhere in your filter's functions. When the filter DLL is activated and the <tt>SuggestDebugging</tt> statement is executed, it will display a message box. You may then attach a debugger to the host, and click "yes" in the message box to drop into the debugger.
</p><h2><span class="mw-headline" id="See_also">See also</span></h2>
<p><a href="User_Reference%253ABCI2000Analysis.html" title="User Reference:BCI2000Analysis">User Reference:BCI2000Analysis</a>
</p>
<!-- 
NewPP limit report
Cached time: 20241129160548
Cache expiry: 86400
Reduced expiry: false
Complications: [show‐toc]
CPU time usage: 0.029 seconds
Real time usage: 0.041 seconds
Preprocessor visited node count: 69/1000000
Post‐expand include size: 0/2097152 bytes
Template argument size: 0/2097152 bytes
Highest expansion depth: 2/100
Expensive parser function count: 0/100
Unstrip recursion depth: 0/20
Unstrip post‐expand size: 43/5000000 bytes
-->
<!--
Transclusion expansion time report (%,ms,calls,template)
100.00%    0.000      1 -total
-->

<!-- Saved in parser cache with key wikidb-bci_:pcache:idhash:2613-0!canonical and timestamp 20241129160548 and revision id 11399.
 -->
</div></div><div class="printfooter">
Retrieved from "<a dir="ltr" href="http://www.bci2000.org/mediawiki/index.php?title=Programming_Reference:Filter_DLLs&amp;oldid=11399">http://www.bci2000.org/mediawiki/index.php?title=Programming_Reference:Filter_DLLs&amp;oldid=11399</a>"</div>
 </div>
</body>
</html>