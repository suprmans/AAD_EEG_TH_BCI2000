////////////////////////////////////////////////////////////////////////////////
// $Id$
// Author: mellinger@neurotechcenter.org
// Description: A class that encapsulates a subset of possibly downsampled
//  channels going into a data file.
//
// $BEGIN_BCI2000_LICENSE$
//
// This file is part of BCI2000, a platform for real-time bio-signal research.
// [ Copyright (C) 2000-2023: BCI2000 team and many external contributors ]
//
// BCI2000 is free software: you can redistribute it and/or modify it under the
// terms of the GNU General Public License as published by the Free Software
// Foundation, either version 3 of the License, or (at your option) any later
// version.
//
// BCI2000 is distributed in the hope that it will be useful, but
//                         WITHOUT ANY WARRANTY
// - without even the implied warranty of MERCHANTABILITY or FITNESS FOR
// A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License along with
// this program.  If not, see <http://www.gnu.org/licenses/>.
//
// $END_BCI2000_LICENSE$
////////////////////////////////////////////////////////////////////////////////
#ifndef OUTPUT_FILE_STREAM_H
#define OUTPUT_FILE_STREAM_H

#include "GenericOutputFormat.h"
#include "Streambuf.h"
#include "IndexList.h"
#include "Files.h"
#include "IIRFilter.h"

#include <iostream>
#include <memory>

class OutputFileStream
{
  public:
    struct Properties
    {
        std::string name;
        IndexList channels;
        int decimation;
    };

    OutputFileStream(const Properties&, std::shared_ptr<GenericOutputFormat>);
    virtual ~OutputFileStream();

    void Preflight(const SignalProperties&) const;
    void Initialize(const SignalProperties&, int statevectorLength);

    void BeginFile(Tiny::File&, const ParamList&, const StateList&);
    void EndFile();

    void Write(const GenericSignal&, const StateVector&);
    void Flush();
    bool IsGood() const;
    int64_t Position();

    std::string FileName() const;

  private:
    void ConstructSubsetProperties(const SignalProperties&, SignalProperties&) const;
    void ConstructDownsampledProperties(const SignalProperties&, SignalProperties&) const;
    void ConstructStatevector(int samples);
    void ConfigureFilter();

    void CopySubset(const GenericSignal&, GenericSignal&) const;
    void DownsampleSubset(const GenericSignal&, GenericSignal&);

    void FixupChannelParameters();
    void FixupSamplingRateParameters();

    void SetPrimaryOutputFile(Tiny::File*);
    void CloseOutputFile();

    bool IsPrimaryStream() const;

  private:
    Properties mProperties;

    BufferedIO mStreambuf;
    std::ostream mOutputStream;
    File* mpFile = nullptr;

    IndexList mChannels;
    bool mChannelSubsetIsIdentity = false;
    GenericSignal mSignalSubset, mDownsampledSubset;

    ParamList mParameters;
    StateList mStates;
    StateVector mStatevector;
    const State* mpSourceTimeSource = nullptr, *mpSourceTimeTarget = nullptr;

    std::shared_ptr<GenericOutputFormat> mpOutputFormat;

    IIRFilter<GenericSignal::ValueType> mFilter;
};

#endif // OUTPUT_FILE_STREAM_H
