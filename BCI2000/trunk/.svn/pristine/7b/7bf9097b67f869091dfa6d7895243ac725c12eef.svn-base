<!DOCTYPE html>
<html lang="en" dir="ltr">
<head>
<meta charset="UTF-8"/>
<title>Programming Reference:SignalSharing Python Demo - BCI2000 Help</title>
<link rel='shortcut icon' href='../../rsrc/favicon.ico' />
<style type='text/css'>
html { font-size:95%; font-family:arial,helvetica,sans-serif }
.printfooter { display:none }
#tocmain { font-size:81%; font-weight:bold; color:grey; background-color:white; border:1px solid black; padding:1em; z-index:10; position:fixed; left:-1px; top:-1px; width:150px; }
#tocmain a { color:black; text-decoration:none }
#tocmain ul { margin:0 0 0 0.4em; padding:0.1em 0 0 0.1em; list-style-position:outside; list-style-type:disc }
#tocmain li { text-indent:0; margin:0 0 0 1em; padding: 0 0 0 0 }
#tocmain p { margin:0; padding:0.1em 0 0 0.1em }
#tocmain .toc1 { margin-left:1.25em; }
#tocmain .toc2 { margin-left:2.25em; }
#tocmain .toc3 { margin-left:3.25em; }
#article { font-size:91%; position:absolute; left:200px; right:0; padding:1em; margin:0 }
</style>
</head>
<body>
 <div id='tocmain'>
 <a href='Main_Page.html'><img src='../../rsrc/bci2000logo.svg' alt='[Main Page]' /></a> <hr class="sep" /><p class="toc0"><a href="User_Tutorial%253ABCI2000_Tour.html">GettingStarted</a></p><ul></ul><p class="toc0"><a href="User_Reference%253AContents.html">User Manual</a></p><ul></ul><p class="toc0"><a href="Technical_Reference%253AContents.html">Technical Reference</a></p><ul></ul><p class="toc0"><a href="Programming_Reference%253AContents.html">Programming Manual</a></p><ul><li class="toc1">Concepts</li><ul><li class="toc2"><a href="Programming_Reference%253AFilter_Chain.html">Filter Chain</a></li><li class="toc2"><a href="Programming_Reference%253ASignals.html">Signals</a></li><li class="toc2"><a href="Programming_Reference%253AError_Handling.html">Error Handling</a></li><li class="toc2"><a href="Programming_Reference%253ALocalization.html">Localization</a></li><li class="toc2"><a href="Programming_Reference%253ARapid_Development.html">Rapid Development</a></li></ul><li class="toc1">Reference</li><ul><li class="toc2"><a href="Programming_Reference%253AGenericFilter_Class.html">GenericFilter</a></li><li class="toc2"><a href="Programming_Reference%253AEnvironment_Class.html">Environment</a></li><li class="toc2"><a href="Programming_Reference%253AGenericVisualization_Class.html">GenericVisualization</a></li><li class="toc2"><a href="Programming_Reference%253AErrors_and_Warnings.html">Errors and Warnings</a></li><li class="toc2"><a href="Programming_Reference%253ADebug_Output.html">Debug Output</a></li></ul><li class="toc1">Data Acquisition</li><ul><li class="toc2"><a href="Programming_Reference%253AGenericADC_Class.html">GenericADC</a></li></ul><li class="toc1">Data Storage</li><ul><li class="toc2"><a href="Programming_Reference%253AGenericFileWriter_Class.html">GenericFileWriter</a></li><li class="toc2"><a href="Programming_Reference%253ABCI2000FileReader_Class.html">BCI2000FileReader</a></li></ul><li class="toc1">Signal Processing</li><ul><li class="toc2"><a href="Programming_Reference%253AIIRFilterBase_Class.html">IIR Filters</a></li></ul><li class="toc1">Application Modules</li><ul><li class="toc2"><a href="Programming_Reference%253AApplicationBase_Class.html">ApplicationBase</a></li><li class="toc2"><a href="Programming_Reference%253AFeedbackTask_Class.html">FeedbackTask</a></li><li class="toc2"><a href="Programming_Reference%253AStimulusTask_Class.html">StimulusTask</a></li><li class="toc2"><a href="Programming_Reference%253A3D_API.html">3D API</a></li></ul><li class="toc1">Howtos</li><ul><li class="toc2"><a href="Programming_Howto%253ABuilding_BCI2000.html">Building BCI2000</a></li><li class="toc2"><a href="Programming_Howto%253ASVN_Client_Setup.html">SVN Client Setup</a></li><li class="toc2"><a href="Programming_Howto%253AUsing_TortoiseSVN.html">Using TortoiseSVN</a></li></ul><li class="toc1"><a href="Programming_FAQ.html">FAQ</a></li><li class="toc1">Tutorials</li><ul><li class="toc2"><a href="Programming_Tutorial%253AImplementing_a_Data_Acquisition_Module.html">Data Acquisition</a></li><li class="toc2"><a href="Programming_Tutorial%253AImplementing_a_Signal_Processing_Filter.html">Signal Processing</a></li><li class="toc2"><a href="Programming_Tutorial%253AImplementing_a_Matlab-based_Filter.html">Matlab Signal Processing</a></li></ul></ul><p class="toc0"><a href="Contributions%253AContents.html">Contributions</a></p><ul></ul><hr class="sep" /><p class="toc0"><a href="BCI2000_Glossary.html">BCI2000 Glossary</a></p> </div>
 <div id='article'>
 <h1 class = "pagetitle">SignalSharing Python Demo</h1>
 <p class = "subtitle">Programming Reference</p>
 <hr class = "sep" />
 <div id="mw-content-text" class="mw-body-content mw-content-ltr" lang="en" dir="ltr"><div class="mw-parser-output"><div class="thumb tright"><div class="thumbinner" style="width:782px;"><a href="https://www.bci2000.org/mediawiki/index.php/File:SignalSharingPythonDemo1.jpg" class="image"><img alt="" src="../images/d/d5/SignalSharingPythonDemo1.jpg" decoding="async" width="780" height="439" class="thumbimage" /></a>  <div class="thumbcaption"><div class="magnify"><a href="https://www.bci2000.org/mediawiki/index.php/File:SignalSharingPythonDemo1.jpg" class="internal" title="Enlarge"></a></div>Demo example of the flexibility of visualizations with Python</div></div></div>
<div id="toc" class="toc" role="navigation" aria-labelledby="mw-toc-heading"><input type="checkbox" role="button" id="toctogglecheckbox" class="toctogglecheckbox" style="display:none" /><div class="toctitle" lang="en" dir="ltr"><h2 id="mw-toc-heading">Contents</h2><span class="toctogglespan"><label class="toctogglelabel" for="toctogglecheckbox"></label></span></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="Programming_Reference%253ASignalSharing_Python_Demo.html#Location"><span class="tocnumber">1</span> <span class="toctext">Location</span></a></li>
<li class="toclevel-1 tocsection-2"><a href="Programming_Reference%253ASignalSharing_Python_Demo.html#Synopsis"><span class="tocnumber">2</span> <span class="toctext">Synopsis</span></a></li>
<li class="toclevel-1 tocsection-3"><a href="Programming_Reference%253ASignalSharing_Python_Demo.html#Function"><span class="tocnumber">3</span> <span class="toctext">Function</span></a></li>
<li class="toclevel-1 tocsection-4"><a href="Programming_Reference%253ASignalSharing_Python_Demo.html#Source_vs_Client"><span class="tocnumber">4</span> <span class="toctext">Source vs Client</span></a></li>
<li class="toclevel-1 tocsection-5"><a href="Programming_Reference%253ASignalSharing_Python_Demo.html#How_to_run"><span class="tocnumber">5</span> <span class="toctext">How to run</span></a></li>
<li class="toclevel-1 tocsection-6"><a href="Programming_Reference%253ASignalSharing_Python_Demo.html#Python_Script"><span class="tocnumber">6</span> <span class="toctext">Python Script</span></a></li>
<li class="toclevel-1 tocsection-7"><a href="Programming_Reference%253ASignalSharing_Python_Demo.html#Conclusion"><span class="tocnumber">7</span> <span class="toctext">Conclusion</span></a></li>
<li class="toclevel-1 tocsection-8"><a href="Programming_Reference%253ASignalSharing_Python_Demo.html#See_also"><span class="tocnumber">8</span> <span class="toctext">See also</span></a></li>
</ul>
</div>

<h2><span class="mw-headline" id="Location">Location</span></h2>
<p><tt>src/core/SignalProcessing/SignalSharingDemo/PythonClientApp</tt>
</p>
<h2><span class="mw-headline" id="Synopsis">Synopsis</span></h2>
<p>The <i>SignalSharing Python Demo</i> demonstrates how to make a complex real-time visualization in Python using data parallelly collected in BCI2000.
It makes use of the <a href="User_Reference%253ASignalSharing.html" title="User Reference:SignalSharing"><i>SignalSharing</i></a> feature in BCI2000.
</p>
<h2><span class="mw-headline" id="Function">Function</span></h2>
<p>The <i>SignalSharing Python Demo</i> creates a basic visualization in Python using the data collected in BCI2000. Since this is done outside of the BCI2000 processing loop, rendering visualizations can take as long as needed. Using Python also allows for the use of the numerous packages that are available to create complex figures.
</p><p>This Demo uses the <a href="User_Reference%253ASignalSharing.html" title="User Reference:SignalSharing"><i>SignalSharing</i></a> feature of BCI2000. The Python demo is a client that visualizes the data coming from BCI2000.
It is a simple Python script that provides a TCP connection with the port that is being used to synchronize the data transfer, and updates the visualization as data is being streamed.
</p>
<h2><span class="mw-headline" id="Source_vs_Client">Source vs Client</span></h2>
<p>The BCI2000 data is sent according to the format specified in <a href="Technical_Reference%253ABCI2000_Messages.html#Descriptor_Supplement=1:_Signal_Data" title="Technical Reference:BCI2000 Messages">BCI2000 Messages Wiki page</a>, as <i>Descriptor=4: Visualization and Brain Signal Data Format</i>, then <i>Descriptor Supplement=1: Signal Data</i>, then <i>data type 2</i>. 
</p><p>With this demo, <b>BCI2000 and the Python script must be run on the same computer</b>. The script expects the data stream to be sending the name of the shared memory, which will only happen if they are both on the same computer. It is possible to grab BCI2000 data from another computer, and is implemented in the <a href="Programming_Reference%253ASignalSharingDemo_Signal_Processing.html" class="mw-redirect" title="Programming Reference:SignalSharingDemo Signal Processing">C++ SignalSharing Demo</a>. If on separate computers, the actual data points are being shared instead of the memory name. Implementing this would require a simple extension of this demo.
</p>
<h2><span class="mw-headline" id="How_to_run">How to run</span></h2>
<ol><li>Build BCI2000 as you would, make sure to check <tt>BUILD_DEMOS</tt></li>
<li>Make sure the <b><a href="Programming_Reference%253ASignalSharingDemo_Signal_Processing.html" class="mw-redirect" title="Programming Reference:SignalSharingDemo Signal Processing">SignalSharingDemo</a></b> works first</li>
<li>Navigate to <tt>src\core\SignalProcessing\SignalSharingDemo\PythonClientApp</tt>, where there is a batch file and a Python file. <b>Copy the batch file to your BCI2000 batch folder</b></li>
<li><b>Run the Python file</b>. For example from the command line, navigate to the folder and run <code>python SignalSharingPythonDemo.py</code></li>
<li><b>Run the batch file</b>, and press "Start Run" (it already sets the configuration, it won't work it you press it multiple times)
<ul><li>If you change the Parameter <i>ShareTransmissionFilter</i>, make sure to also change it in the Python script</li></ul></li>
<li><b>In the visualization window</b>, pressing the <i>Set Running 0</i> button will set the <i>Running</i> state to 0, stopping BCI2000. This is an example how to modify state values from the Python side.</li>
<li><b>In the visualization window</b>, pressing the <i>Insert NaNs</i> button will insert a data block of NaNs into the BCI2000 processing chain. In the <i>SpatialFilter</i> signal visualization, you will be able to see the NaN block in form of an empty area in the display. This is an example of how to modify signal values from the Python side.</li></ol>
<h2><span class="mw-headline" id="Python_Script">Python Script</span></h2>
<p>Here is the same code that is on the SVN (r8388)
</p>
<div class="mw-highlight mw-highlight-lang-python mw-content-ltr" dir="ltr"><pre><span></span><span class="ch">#! /usr/bin/env python3</span>

<span class="kn">import</span> <span class="nn">socket</span>
<span class="kn">from</span> <span class="nn">select</span> <span class="kn">import</span> <span class="n">select</span>
<span class="kn">from</span> <span class="nn">multiprocessing</span> <span class="kn">import</span> <span class="n">shared_memory</span>
<span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="nn">plt</span>
<span class="kn">from</span> <span class="nn">matplotlib.widgets</span> <span class="kn">import</span> <span class="n">Button</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>
<span class="kn">import</span> <span class="nn">io</span>
<span class="kn">import</span> <span class="nn">struct</span>
<span class="kn">import</span> <span class="nn">traceback</span>
<span class="kn">import</span> <span class="nn">platform</span>
<span class="kn">from</span> <span class="nn">enum</span> <span class="kn">import</span> <span class="n">Enum</span>

<span class="k">class</span> <span class="nc">Object</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    <span class="k">pass</span>

<span class="k">def</span> <span class="nf">waitForRead</span><span class="p">(</span><span class="n">sock</span><span class="p">):</span>
<span class="w">    </span><span class="sd">&quot;&quot;&quot;polling wait for data on the socket so we may react to a keyboard interrupt&quot;&quot;&quot;</span>
    <span class="n">pollingIntervalSeconds</span> <span class="o">=</span> <span class="mf">0.1</span>
    <span class="n">ready</span><span class="p">,</span> <span class="n">_</span><span class="p">,</span> <span class="n">_</span> <span class="o">=</span> <span class="n">select</span><span class="p">([</span><span class="n">sock</span><span class="p">],</span> <span class="p">[],</span> <span class="p">[],</span> <span class="n">pollingIntervalSeconds</span><span class="p">)</span>
    <span class="k">while</span> <span class="ow">not</span> <span class="n">ready</span><span class="p">:</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">ready</span><span class="p">,</span> <span class="n">_</span><span class="p">,</span> <span class="n">_</span> <span class="o">=</span> <span class="n">select</span><span class="p">([</span><span class="n">sock</span><span class="p">],</span> <span class="p">[],</span> <span class="p">[],</span> <span class="n">pollingIntervalSeconds</span><span class="p">)</span>
        <span class="k">except</span> <span class="ne">KeyboardInterrupt</span><span class="p">:</span>
            <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Keyboard interrupt, exiting&#39;</span><span class="p">)</span>
            <span class="n">quit</span><span class="p">()</span>
    

<span class="k">def</span> <span class="nf">readLine</span><span class="p">(</span><span class="n">stream</span><span class="p">,</span> <span class="n">terminator</span> <span class="o">=</span> <span class="sa">b</span><span class="s1">&#39;</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">):</span>
<span class="w">    </span><span class="sd">&quot;&quot;&quot;read a line from a stream up to terminator character&quot;&quot;&quot;</span>
    <span class="n">chars</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">c</span> <span class="o">=</span> <span class="n">stream</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
    <span class="k">while</span> <span class="n">c</span> <span class="o">!=</span> <span class="n">terminator</span> <span class="ow">and</span> <span class="n">c</span> <span class="o">!=</span> <span class="sa">b</span><span class="s1">&#39;&#39;</span><span class="p">:</span>
        <span class="n">chars</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">c</span><span class="p">)</span>
        <span class="n">c</span> <span class="o">=</span> <span class="n">stream</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
    <span class="k">return</span> <span class="nb">str</span><span class="p">(</span><span class="sa">b</span><span class="s1">&#39;&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">chars</span><span class="p">),</span> <span class="s1">&#39;utf-8&#39;</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">BciDescSupp</span><span class="p">(</span><span class="n">Enum</span><span class="p">):</span>
<span class="w">    </span><span class="sd">&quot;&quot;&quot;BCI2000 descriptor and supplement for relevant messages&quot;&quot;&quot;</span>
    <span class="n">Parameter</span> <span class="o">=</span> <span class="sa">b</span><span class="s1">&#39;</span><span class="se">\x02\x00</span><span class="s1">&#39;</span>
    <span class="n">State</span> <span class="o">=</span> <span class="sa">b</span><span class="s1">&#39;</span><span class="se">\x03\x00</span><span class="s1">&#39;</span>
    <span class="n">SignalData</span> <span class="o">=</span> <span class="sa">b</span><span class="s1">&#39;</span><span class="se">\x04\x01</span><span class="s1">&#39;</span>
    <span class="n">SignalProperties</span> <span class="o">=</span> <span class="sa">b</span><span class="s1">&#39;</span><span class="se">\x04\x03</span><span class="s1">&#39;</span>
    <span class="n">SysCommand</span> <span class="o">=</span> <span class="sa">b</span><span class="s1">&#39;</span><span class="se">\x06\x00</span><span class="s1">&#39;</span>

<span class="k">def</span> <span class="nf">readBciLengthField</span><span class="p">(</span><span class="n">stream</span><span class="p">,</span> <span class="n">fieldSize</span><span class="p">):</span>
<span class="w">    </span><span class="sd">&quot;&quot;&quot;read a length field of specified size from a stream&quot;&quot;&quot;</span>
    <span class="c1"># read fieldSize bytes that make up a little-endian number</span>
    <span class="n">b</span> <span class="o">=</span> <span class="n">stream</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="n">fieldSize</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">b</span> <span class="o">==</span> <span class="sa">b</span><span class="s1">&#39;&#39;</span><span class="p">:</span>
        <span class="k">raise</span> <span class="ne">EOFError</span><span class="p">()</span>
    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">b</span><span class="p">)</span> <span class="o">!=</span> <span class="n">fieldSize</span><span class="p">:</span>
        <span class="k">raise</span> <span class="ne">RuntimeError</span><span class="p">(</span><span class="s1">&#39;Could not read size field&#39;</span><span class="p">)</span>
    <span class="n">n</span> <span class="o">=</span> <span class="nb">int</span><span class="o">.</span><span class="n">from_bytes</span><span class="p">(</span><span class="n">b</span><span class="p">,</span> <span class="s1">&#39;little&#39;</span><span class="p">)</span>
    <span class="c1"># if all bytes are 0xff, ignore them and read the field value as a string</span>
    <span class="k">if</span> <span class="n">n</span> <span class="o">==</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="n">fieldSize</span> <span class="o">*</span> <span class="mi">8</span><span class="p">))</span> <span class="o">-</span> <span class="mi">1</span><span class="p">:</span>
        <span class="n">n</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">readLine</span><span class="p">(</span><span class="n">stream</span><span class="p">,</span> <span class="sa">b</span><span class="s1">&#39;</span><span class="se">\x00</span><span class="s1">&#39;</span><span class="p">))</span>
    <span class="k">return</span> <span class="n">n</span>

<span class="k">def</span> <span class="nf">writeBciLengthField</span><span class="p">(</span><span class="n">stream</span><span class="p">,</span> <span class="n">fieldSize</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
<span class="w">    </span><span class="sd">&quot;&quot;&quot;write a length field of specified size to a stream&quot;&quot;&quot;</span>
    <span class="n">n</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="n">fieldSize</span> <span class="o">*</span> <span class="mi">8</span><span class="p">))</span> <span class="o">-</span> <span class="mi">1</span>
    <span class="k">if</span> <span class="n">value</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">:</span>
        <span class="n">b</span> <span class="o">=</span> <span class="n">value</span><span class="o">.</span><span class="n">to_bytes</span><span class="p">(</span><span class="n">fieldSize</span><span class="p">,</span> <span class="s1">&#39;little&#39;</span><span class="p">)</span>
        <span class="n">stream</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">b</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">b</span> <span class="o">=</span> <span class="n">n</span><span class="o">.</span><span class="n">to_bytes</span><span class="p">(</span><span class="n">fieldSize</span><span class="p">,</span> <span class="s1">&#39;little&#39;</span><span class="p">)</span>
        <span class="n">stream</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">b</span><span class="p">)</span>
        <span class="n">b</span> <span class="o">=</span> <span class="n">value</span><span class="o">.</span><span class="n">to_string</span><span class="p">()</span>
        <span class="n">stream</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">b</span><span class="p">)</span>
        <span class="n">stream</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="sa">b</span><span class="s1">&#39;</span><span class="se">\x00</span><span class="s1">&#39;</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">readBciIndexCount</span><span class="p">(</span><span class="n">stream</span><span class="p">):</span>
<span class="w">    </span><span class="sd">&quot;&quot;&quot;read a channel or element index, ignoring the actual indices&quot;&quot;&quot;</span>
    <span class="n">s</span> <span class="o">=</span> <span class="n">readLine</span><span class="p">(</span><span class="n">stream</span><span class="p">,</span> <span class="sa">b</span><span class="s1">&#39; &#39;</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">s</span> <span class="o">==</span> <span class="s1">&#39;{&#39;</span><span class="p">:</span>
        <span class="n">n</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="n">s</span> <span class="o">=</span> <span class="n">readLine</span><span class="p">(</span><span class="n">stream</span><span class="p">,</span> <span class="sa">b</span><span class="s1">&#39; &#39;</span><span class="p">)</span>
        <span class="k">while</span> <span class="n">s</span> <span class="o">!=</span> <span class="s1">&#39;}&#39;</span><span class="p">:</span>
            <span class="n">n</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="n">s</span> <span class="o">=</span> <span class="n">readLine</span><span class="p">(</span><span class="n">stream</span><span class="p">,</span> <span class="sa">b</span><span class="s1">&#39; &#39;</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">n</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">n</span>

<span class="k">def</span> <span class="nf">readBciPhysicalUnit</span><span class="p">(</span><span class="n">stream</span><span class="p">):</span>
<span class="w">    </span><span class="sd">&quot;&quot;&quot;read the members of a physical unit from a stream&quot;&quot;&quot;</span>
    <span class="n">pu</span> <span class="o">=</span> <span class="n">Object</span><span class="p">()</span>
    <span class="n">pu</span><span class="o">.</span><span class="n">offset</span> <span class="o">=</span> <span class="nb">float</span><span class="p">(</span><span class="n">readLine</span><span class="p">(</span><span class="n">stream</span><span class="p">,</span> <span class="sa">b</span><span class="s1">&#39; &#39;</span><span class="p">))</span>
    <span class="n">pu</span><span class="o">.</span><span class="n">gain</span> <span class="o">=</span> <span class="nb">float</span><span class="p">(</span><span class="n">readLine</span><span class="p">(</span><span class="n">stream</span><span class="p">,</span> <span class="sa">b</span><span class="s1">&#39; &#39;</span><span class="p">))</span>
    <span class="n">pu</span><span class="o">.</span><span class="n">unit</span> <span class="o">=</span> <span class="n">readLine</span><span class="p">(</span><span class="n">stream</span><span class="p">,</span> <span class="sa">b</span><span class="s1">&#39; &#39;</span><span class="p">)</span>
    <span class="n">pu</span><span class="o">.</span><span class="n">rawMin</span> <span class="o">=</span> <span class="nb">float</span><span class="p">(</span><span class="n">readLine</span><span class="p">(</span><span class="n">stream</span><span class="p">,</span> <span class="sa">b</span><span class="s1">&#39; &#39;</span><span class="p">))</span>
    <span class="n">pu</span><span class="o">.</span><span class="n">rawMax</span> <span class="o">=</span> <span class="nb">float</span><span class="p">(</span><span class="n">readLine</span><span class="p">(</span><span class="n">stream</span><span class="p">,</span> <span class="sa">b</span><span class="s1">&#39; &#39;</span><span class="p">))</span>
    <span class="k">return</span> <span class="n">pu</span>

<span class="k">def</span> <span class="nf">readBciSourceIdentifier</span><span class="p">(</span><span class="n">stream</span><span class="p">):</span>
<span class="w">    </span><span class="sd">&quot;&quot;&quot;read a BCI2000 source identifier from a stream&quot;&quot;&quot;</span>
    <span class="n">b</span> <span class="o">=</span> <span class="n">stream</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">b</span> <span class="o">!=</span> <span class="sa">b</span><span class="s1">&#39;</span><span class="se">\xff</span><span class="s1">&#39;</span><span class="p">:</span>
        <span class="k">return</span> <span class="nb">str</span><span class="p">(</span><span class="n">b</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
    <span class="k">return</span> <span class="n">readLine</span><span class="p">(</span><span class="n">stream</span><span class="p">,</span> <span class="sa">b</span><span class="s1">&#39;</span><span class="se">\x00</span><span class="s1">&#39;</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">readBciRawMessage</span><span class="p">(</span><span class="n">stream</span><span class="p">):</span>
<span class="w">    </span><span class="sd">&quot;&quot;&quot;read a full raw BCI2000 message from a stream&quot;&quot;&quot;</span>
    <span class="n">descsupp</span> <span class="o">=</span> <span class="n">stream</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="c1"># get descriptor and descriptor supplement</span>
    <span class="k">if</span> <span class="n">descsupp</span> <span class="o">==</span> <span class="sa">b</span><span class="s1">&#39;&#39;</span><span class="p">:</span>
        <span class="k">raise</span> <span class="ne">EOFError</span><span class="p">()</span>
    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">descsupp</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">2</span><span class="p">:</span>
        <span class="k">raise</span> <span class="ne">RuntimeError</span><span class="p">(</span><span class="s1">&#39;Could not read descriptor fields&#39;</span><span class="p">)</span>
    <span class="n">messageLength</span> <span class="o">=</span> <span class="n">readBciLengthField</span><span class="p">(</span><span class="n">stream</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
    <span class="n">chunks</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">bytesRead</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">while</span> <span class="n">bytesRead</span> <span class="o">&lt;</span> <span class="n">messageLength</span><span class="p">:</span>
        <span class="n">chunk</span> <span class="o">=</span> <span class="n">stream</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="nb">min</span><span class="p">(</span><span class="n">messageLength</span> <span class="o">-</span> <span class="n">bytesRead</span><span class="p">,</span> <span class="mi">2048</span><span class="p">))</span>
        <span class="k">if</span> <span class="n">chunk</span> <span class="o">==</span> <span class="sa">b</span><span class="s1">&#39;&#39;</span><span class="p">:</span>
            <span class="k">raise</span> <span class="ne">EOFError</span><span class="p">()</span>
        <span class="n">chunks</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">chunk</span><span class="p">)</span>
        <span class="n">bytesRead</span> <span class="o">=</span> <span class="n">bytesRead</span> <span class="o">+</span> <span class="nb">len</span><span class="p">(</span><span class="n">chunk</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">descsupp</span><span class="p">,</span> <span class="sa">b</span><span class="s1">&#39;&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">chunks</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">parseBciSignalProperties</span><span class="p">(</span><span class="n">stream</span><span class="p">):</span>
<span class="w">    </span><span class="sd">&quot;&quot;&quot;parse a raw signal properties message into an object&quot;&quot;&quot;</span>
    <span class="n">sp</span> <span class="o">=</span> <span class="n">Object</span><span class="p">()</span>
    <span class="n">sp</span><span class="o">.</span><span class="n">kind</span> <span class="o">=</span> <span class="s1">&#39;SignalProperties&#39;</span>
    <span class="n">sp</span><span class="o">.</span><span class="n">sourceID</span> <span class="o">=</span> <span class="n">readBciSourceIdentifier</span><span class="p">(</span><span class="n">stream</span><span class="p">)</span>
    <span class="n">sp</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">readLine</span><span class="p">(</span><span class="n">stream</span><span class="p">,</span> <span class="sa">b</span><span class="s1">&#39; &#39;</span><span class="p">)</span>
    <span class="n">sp</span><span class="o">.</span><span class="n">channels</span> <span class="o">=</span> <span class="n">readBciIndexCount</span><span class="p">(</span><span class="n">stream</span><span class="p">)</span>
    <span class="n">sp</span><span class="o">.</span><span class="n">elements</span> <span class="o">=</span> <span class="n">readBciIndexCount</span><span class="p">(</span><span class="n">stream</span><span class="p">)</span>
    <span class="n">sp</span><span class="o">.</span><span class="n">type</span> <span class="o">=</span> <span class="n">readLine</span><span class="p">(</span><span class="n">stream</span><span class="p">,</span> <span class="sa">b</span><span class="s1">&#39; &#39;</span><span class="p">)</span>
    <span class="n">sp</span><span class="o">.</span><span class="n">channelUnit</span> <span class="o">=</span> <span class="n">readBciPhysicalUnit</span><span class="p">(</span><span class="n">stream</span><span class="p">)</span>
    <span class="n">sp</span><span class="o">.</span><span class="n">elementUnit</span> <span class="o">=</span> <span class="n">readBciPhysicalUnit</span><span class="p">(</span><span class="n">stream</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">sp</span>

<span class="k">def</span> <span class="nf">parseBciSignalData</span><span class="p">(</span><span class="n">stream</span><span class="p">):</span>
<span class="w">    </span><span class="sd">&quot;&quot;&quot;parse a raw signal data message into an object&quot;&quot;&quot;</span>
    <span class="n">signal</span> <span class="o">=</span> <span class="n">Object</span><span class="p">()</span>
    <span class="n">signal</span><span class="o">.</span><span class="n">kind</span> <span class="o">=</span> <span class="s1">&#39;Signal&#39;</span>
    <span class="n">signal</span><span class="o">.</span><span class="n">sourceID</span> <span class="o">=</span> <span class="n">readBciSourceIdentifier</span><span class="p">(</span><span class="n">stream</span><span class="p">)</span>
    <span class="n">signal</span><span class="o">.</span><span class="n">type</span> <span class="o">=</span> <span class="nb">ord</span><span class="p">(</span><span class="n">stream</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="mi">1</span><span class="p">))</span>
    <span class="n">signal</span><span class="o">.</span><span class="n">channels</span> <span class="o">=</span> <span class="n">readBciLengthField</span><span class="p">(</span><span class="n">stream</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
    <span class="n">signal</span><span class="o">.</span><span class="n">elements</span> <span class="o">=</span> <span class="n">readBciLengthField</span><span class="p">(</span><span class="n">stream</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
    <span class="n">signal</span><span class="o">.</span><span class="n">shm</span> <span class="o">=</span> <span class="n">readLine</span><span class="p">(</span><span class="n">stream</span><span class="p">,</span> <span class="sa">b</span><span class="s1">&#39;</span><span class="se">\x00</span><span class="s1">&#39;</span><span class="p">)</span>

    <span class="k">if</span> <span class="n">signal</span><span class="o">.</span><span class="n">channels</span> <span class="o">!=</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">signal</span><span class="o">.</span><span class="n">elements</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">signal</span><span class="o">.</span><span class="n">type</span> <span class="o">&amp;</span> <span class="mi">64</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
            <span class="k">raise</span> <span class="ne">RuntimeError</span><span class="p">(</span><span class="s1">&#39;Signal data not located in shared memory&#39;</span><span class="p">)</span>
        <span class="n">signal</span><span class="o">.</span><span class="n">type</span> <span class="o">=</span> <span class="n">signal</span><span class="o">.</span><span class="n">type</span> <span class="o">&amp;</span> <span class="o">~</span><span class="mi">64</span>
        <span class="k">if</span> <span class="n">signal</span><span class="o">.</span><span class="n">type</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
            <span class="n">signal</span><span class="o">.</span><span class="n">type</span> <span class="o">=</span> <span class="s1">&#39;int16&#39;</span>
        <span class="k">elif</span> <span class="n">signal</span><span class="o">.</span><span class="n">type</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
            <span class="n">signal</span><span class="o">.</span><span class="n">type</span> <span class="o">=</span> <span class="s1">&#39;float24&#39;</span>
        <span class="k">elif</span> <span class="n">signal</span><span class="o">.</span><span class="n">type</span> <span class="o">==</span> <span class="mi">2</span><span class="p">:</span>
            <span class="n">signal</span><span class="o">.</span><span class="n">type</span> <span class="o">=</span> <span class="s1">&#39;float32&#39;</span>
        <span class="k">elif</span> <span class="n">signal</span><span class="o">.</span><span class="n">type</span> <span class="o">==</span> <span class="mi">3</span><span class="p">:</span>
            <span class="n">signal</span><span class="o">.</span><span class="n">type</span> <span class="o">=</span> <span class="s1">&#39;int32&#39;</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">raise</span> <span class="ne">RuntimeError</span><span class="p">(</span><span class="s1">&#39;Invalid signal type&#39;</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">platform</span><span class="o">.</span><span class="n">system</span><span class="p">()</span> <span class="o">==</span> <span class="s1">&#39;Windows&#39;</span><span class="p">:</span>
              <span class="n">signal</span><span class="o">.</span><span class="n">shm</span> <span class="o">=</span> <span class="n">signal</span><span class="o">.</span><span class="n">shm</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot;/&quot;</span><span class="p">)[</span><span class="mi">1</span><span class="p">]</span>

    <span class="k">return</span> <span class="n">signal</span>

<span class="k">def</span> <span class="nf">parseBciParameter</span><span class="p">(</span><span class="n">stream</span><span class="p">):</span>
<span class="w">    </span><span class="sd">&quot;&quot;&quot;parse a raw parameter message into an object&quot;&quot;&quot;</span>
    <span class="n">param</span> <span class="o">=</span> <span class="n">Object</span><span class="p">()</span>
    <span class="n">param</span><span class="o">.</span><span class="n">kind</span> <span class="o">=</span> <span class="s1">&#39;Parameter&#39;</span>

    <span class="k">return</span> <span class="n">param</span><span class="p">;</span>

<span class="k">def</span> <span class="nf">parseBciSysCommand</span><span class="p">(</span><span class="n">stream</span><span class="p">):</span>
<span class="w">    </span><span class="sd">&quot;&quot;&quot;parse a raw syscommand message into an object&quot;&quot;&quot;</span>
    <span class="n">syscmd</span> <span class="o">=</span> <span class="n">Object</span><span class="p">()</span>
    <span class="n">syscmd</span><span class="o">.</span><span class="n">kind</span> <span class="o">=</span> <span class="s1">&#39;SysCommand&#39;</span>
    <span class="n">syscmd</span><span class="o">.</span><span class="n">command</span> <span class="o">=</span> <span class="n">readLine</span><span class="p">(</span><span class="n">stream</span><span class="p">,</span> <span class="sa">b</span><span class="s1">&#39;</span><span class="se">\x00</span><span class="s1">&#39;</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">syscmd</span><span class="p">;</span>

<span class="k">def</span> <span class="nf">receiveBciMessage</span><span class="p">(</span><span class="n">stream</span><span class="p">):</span>
<span class="w">    </span><span class="sd">&quot;&quot;&quot;read and parse a single BCI2000 message from a stream&quot;&quot;&quot;</span>
    <span class="n">descsupp</span><span class="p">,</span> <span class="n">data</span> <span class="o">=</span> <span class="n">readBciRawMessage</span><span class="p">(</span><span class="n">stream</span><span class="p">)</span>
    <span class="n">stream2</span> <span class="o">=</span> <span class="n">io</span><span class="o">.</span><span class="n">BytesIO</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">descsupp</span> <span class="o">==</span> <span class="n">BciDescSupp</span><span class="o">.</span><span class="n">SignalProperties</span><span class="o">.</span><span class="n">value</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">parseBciSignalProperties</span><span class="p">(</span><span class="n">stream2</span><span class="p">)</span>
    <span class="k">elif</span> <span class="n">descsupp</span> <span class="o">==</span> <span class="n">BciDescSupp</span><span class="o">.</span><span class="n">SignalData</span><span class="o">.</span><span class="n">value</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">parseBciSignalData</span><span class="p">(</span><span class="n">stream2</span><span class="p">)</span>
    <span class="k">elif</span> <span class="n">descsupp</span> <span class="o">==</span> <span class="n">BciDescSupp</span><span class="o">.</span><span class="n">Parameter</span><span class="o">.</span><span class="n">value</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">parseBciParameter</span><span class="p">(</span><span class="n">stream2</span><span class="p">)</span>
    <span class="k">elif</span> <span class="n">descsupp</span> <span class="o">==</span> <span class="n">BciDescSupp</span><span class="o">.</span><span class="n">SysCommand</span><span class="o">.</span><span class="n">value</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">parseBciSysCommand</span><span class="p">(</span><span class="n">stream2</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">raise</span> <span class="ne">RuntimeError</span><span class="p">(</span><span class="s1">&#39;Unexpected BCI2000 message type&#39;</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">writeBciMessage</span><span class="p">(</span><span class="n">stream</span><span class="p">,</span> <span class="n">descSupp</span><span class="p">,</span> <span class="n">payload</span><span class="p">):</span>
<span class="w">    </span><span class="sd">&quot;&quot;&quot;write a signal BCI2000 message to a stream&quot;&quot;&quot;</span>
    <span class="n">stream</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">descSupp</span><span class="p">)</span>
    <span class="n">length</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">payload</span><span class="p">)</span>
    <span class="n">writeBciLengthField</span><span class="p">(</span><span class="n">stream</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="n">length</span><span class="p">)</span>
    <span class="n">stream</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">payload</span><span class="p">)</span>
    <span class="n">stream</span><span class="o">.</span><span class="n">flush</span><span class="p">()</span>

<span class="k">def</span> <span class="nf">writeBciStateMessage</span><span class="p">(</span><span class="n">stream</span><span class="p">,</span> <span class="n">stateLine</span><span class="p">):</span>
<span class="w">    </span><span class="sd">&quot;&quot;&quot;write a single BCI2000 state message to a stream&quot;&quot;&quot;</span>
    <span class="n">writeBciMessage</span><span class="p">(</span><span class="n">stream</span><span class="p">,</span> <span class="n">BciDescSupp</span><span class="o">.</span><span class="n">State</span><span class="o">.</span><span class="n">value</span><span class="p">,</span> <span class="nb">bytes</span><span class="p">(</span><span class="n">stateLine</span><span class="p">,</span> <span class="s1">&#39;utf-8&#39;</span><span class="p">)</span> <span class="o">+</span> <span class="sa">b</span><span class="s1">&#39;</span><span class="se">\r\n</span><span class="s1">&#39;</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">writeBciSysCommandMessage</span><span class="p">(</span><span class="n">stream</span><span class="p">,</span> <span class="n">syscmd</span><span class="p">):</span>
<span class="w">    </span><span class="sd">&quot;&quot;&quot;write a single BCI2000 sys command message to a stream&quot;&quot;&quot;</span>
    <span class="n">writeBciMessage</span><span class="p">(</span><span class="n">stream</span><span class="p">,</span> <span class="n">BciDescSupp</span><span class="o">.</span><span class="n">SysCommand</span><span class="o">.</span><span class="n">value</span><span class="p">,</span> <span class="nb">bytes</span><span class="p">(</span><span class="n">syscmd</span><span class="p">,</span> <span class="s1">&#39;utf-8&#39;</span><span class="p">)</span> <span class="o">+</span> <span class="sa">b</span><span class="s1">&#39;</span><span class="se">\0</span><span class="s1">&#39;</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">writeBciSignalMessage</span><span class="p">(</span><span class="n">stream</span><span class="p">,</span> <span class="n">data</span><span class="p">):</span>
<span class="w">    </span><span class="sd">&quot;&quot;&quot;write a numpy array&#39;s contents as a signal message to a stream&quot;&quot;&quot;</span>
    <span class="n">stream2</span> <span class="o">=</span> <span class="n">io</span><span class="o">.</span><span class="n">BytesIO</span><span class="p">()</span>
    <span class="n">stream2</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="sa">b</span><span class="s1">&#39;</span><span class="se">\xff</span><span class="s1">&#39;</span> <span class="o">+</span> <span class="nb">bytes</span><span class="p">(</span><span class="s1">&#39;Signal&#39;</span><span class="p">,</span> <span class="s1">&#39;utf-8&#39;</span><span class="p">)</span> <span class="o">+</span> <span class="sa">b</span><span class="s1">&#39;</span><span class="se">\x00</span><span class="s1">&#39;</span> <span class="o">+</span> <span class="sa">b</span><span class="s1">&#39;</span><span class="se">\x02</span><span class="s1">&#39;</span><span class="p">)</span>
    <span class="n">writeBciLengthField</span><span class="p">(</span><span class="n">stream2</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="n">data</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
    <span class="n">writeBciLengthField</span><span class="p">(</span><span class="n">stream2</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="n">data</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
    <span class="k">for</span> <span class="n">ch</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">data</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]):</span>
        <span class="k">for</span> <span class="n">el</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">data</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">1</span><span class="p">]):</span>
            <span class="n">stream2</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">struct</span><span class="o">.</span><span class="n">pack</span><span class="p">(</span><span class="s1">&#39;&lt;f&#39;</span><span class="p">,</span> <span class="n">data</span><span class="p">[</span><span class="n">ch</span><span class="p">,</span> <span class="n">el</span><span class="p">]))</span>
    <span class="n">writeBciMessage</span><span class="p">(</span><span class="n">stream</span><span class="p">,</span> <span class="n">BciDescSupp</span><span class="o">.</span><span class="n">SignalData</span><span class="o">.</span><span class="n">value</span><span class="p">,</span> <span class="n">stream2</span><span class="o">.</span><span class="n">getvalue</span><span class="p">())</span>
    <span class="n">stream2</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>

<span class="c1">#user input</span>
<span class="n">HOST</span><span class="p">,</span> <span class="n">PORT</span> <span class="o">=</span> <span class="s2">&quot;localhost&quot;</span><span class="p">,</span> <span class="mi">1879</span>

<span class="c1">#initialize variables</span>
<span class="n">CHANNELS</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span>
<span class="n">ELEMENTS</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span>
<span class="n">setProps</span> <span class="o">=</span> <span class="kc">False</span>
<span class="n">chNames</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">memoryName</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>
<span class="n">conn</span> <span class="o">=</span> <span class="p">[]</span>

<span class="k">def</span> <span class="nf">setRunning0</span><span class="p">(</span><span class="n">event</span><span class="p">):</span>
<span class="w">    </span><span class="sd">&quot;&quot;&quot;Send a state value to BCI2000&quot;&quot;&quot;</span>
    <span class="n">stream</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="n">makefile</span><span class="p">(</span><span class="s1">&#39;wb&#39;</span><span class="p">)</span>
    <span class="n">writeBciStateMessage</span><span class="p">(</span><span class="n">stream</span><span class="p">,</span> <span class="s1">&#39;Running 1 0&#39;</span><span class="p">)</span>
    <span class="n">writeBciSysCommandMessage</span><span class="p">(</span><span class="n">stream</span><span class="p">,</span> <span class="s1">&#39;EndOfData&#39;</span><span class="p">)</span>
    <span class="n">stream</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>

<span class="k">def</span> <span class="nf">insertNaNs</span><span class="p">(</span><span class="n">event</span><span class="p">):</span>
<span class="w">    </span><span class="sd">&quot;&quot;&quot;Send a signal of NaNs to BCI2000&quot;&quot;&quot;</span>
    <span class="n">data</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">ndarray</span><span class="p">((</span><span class="n">CHANNELS</span><span class="p">,</span><span class="n">ELEMENTS</span><span class="p">))</span>
    <span class="k">for</span> <span class="n">ch</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="n">CHANNELS</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">el</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">ELEMENTS</span><span class="p">):</span>
            <span class="n">data</span><span class="p">[</span><span class="n">ch</span><span class="p">,</span> <span class="n">el</span><span class="p">]</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">nan</span>
    <span class="n">stream</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="n">makefile</span><span class="p">(</span><span class="s1">&#39;wb&#39;</span><span class="p">)</span>
    <span class="n">writeBciSignalMessage</span><span class="p">(</span><span class="n">stream</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span>
    <span class="n">writeBciSysCommandMessage</span><span class="p">(</span><span class="n">stream</span><span class="p">,</span> <span class="s1">&#39;EndOfData&#39;</span><span class="p">)</span>
    <span class="n">stream</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>

<span class="n">figure</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">subplots</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">8</span><span class="p">))</span>
<span class="n">ax</span><span class="o">.</span><span class="n">set_xlim</span><span class="p">(</span><span class="o">-</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span>
<span class="n">ax</span><span class="o">.</span><span class="n">set_ylim</span><span class="p">(</span><span class="o">-</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span>
<span class="n">figure</span><span class="o">.</span><span class="n">set_facecolor</span><span class="p">((</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">))</span>
<span class="n">ax</span><span class="o">.</span><span class="n">set_axis_off</span><span class="p">()</span>
<span class="n">ax</span><span class="o">.</span><span class="n">set_frame_on</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
<span class="n">figure</span><span class="o">.</span><span class="n">canvas</span><span class="o">.</span><span class="n">draw</span><span class="p">()</span>

<span class="n">axnans</span> <span class="o">=</span> <span class="n">figure</span><span class="o">.</span><span class="n">add_axes</span><span class="p">([</span><span class="mf">0.05</span><span class="p">,</span> <span class="mf">0.05</span><span class="p">,</span> <span class="mf">0.4</span><span class="p">,</span> <span class="mf">0.075</span><span class="p">])</span>
<span class="n">axstop</span> <span class="o">=</span> <span class="n">figure</span><span class="o">.</span><span class="n">add_axes</span><span class="p">([</span><span class="mf">0.55</span><span class="p">,</span> <span class="mf">0.05</span><span class="p">,</span> <span class="mf">0.4</span><span class="p">,</span> <span class="mf">0.075</span><span class="p">])</span>
<span class="n">bnans</span> <span class="o">=</span> <span class="n">Button</span><span class="p">(</span><span class="n">axnans</span><span class="p">,</span> <span class="s1">&#39;Insert NaNs&#39;</span><span class="p">)</span>
<span class="n">bnans</span><span class="o">.</span><span class="n">on_clicked</span><span class="p">(</span><span class="n">insertNaNs</span><span class="p">)</span>
<span class="n">bstop</span> <span class="o">=</span> <span class="n">Button</span><span class="p">(</span><span class="n">axstop</span><span class="p">,</span> <span class="s1">&#39;Set Running 0&#39;</span><span class="p">)</span>
<span class="n">bstop</span><span class="o">.</span><span class="n">on_clicked</span><span class="p">(</span><span class="n">setRunning0</span><span class="p">)</span>

<span class="c1">#listen for connection on specified port</span>
<span class="k">try</span><span class="p">:</span>
    <span class="k">with</span> <span class="n">socket</span><span class="o">.</span><span class="n">socket</span><span class="p">(</span><span class="n">socket</span><span class="o">.</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">socket</span><span class="o">.</span><span class="n">SOCK_STREAM</span><span class="p">)</span> <span class="k">as</span> <span class="n">s</span><span class="p">:</span>
        <span class="n">s</span><span class="o">.</span><span class="n">bind</span><span class="p">((</span><span class="n">HOST</span><span class="p">,</span> <span class="n">PORT</span><span class="p">))</span>
        <span class="n">s</span><span class="o">.</span><span class="n">listen</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
        <span class="k">while</span> <span class="kc">True</span><span class="p">:</span>
            <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;Waiting for BCI2000 on </span><span class="si">%s</span><span class="s2"> at port </span><span class="si">%i</span><span class="s2">&quot;</span> <span class="o">%</span><span class="p">(</span><span class="n">HOST</span><span class="p">,</span> <span class="n">PORT</span><span class="p">))</span>
            <span class="n">waitForRead</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
            <span class="n">conn</span><span class="p">,</span> <span class="n">addr</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">accept</span><span class="p">()</span>
            <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Connected by&#39;</span><span class="p">,</span> <span class="n">addr</span><span class="p">)</span>
            <span class="k">try</span><span class="p">:</span>
                <span class="n">stream</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="n">makefile</span><span class="p">(</span><span class="s1">&#39;rb&#39;</span><span class="p">)</span>
                <span class="k">while</span> <span class="kc">True</span><span class="p">:</span> <span class="c1">#go until we receive an EOFError exception</span>
                    <span class="n">waitForRead</span><span class="p">(</span><span class="n">conn</span><span class="p">)</span>
                    <span class="n">msg</span> <span class="o">=</span> <span class="n">receiveBciMessage</span><span class="p">(</span><span class="n">stream</span><span class="p">)</span>
                        
                    <span class="k">if</span> <span class="n">msg</span><span class="o">.</span><span class="n">kind</span> <span class="o">==</span> <span class="s1">&#39;SignalProperties&#39;</span> <span class="ow">and</span> <span class="n">msg</span><span class="o">.</span><span class="n">sourceID</span> <span class="o">==</span> <span class="s1">&#39;Signal&#39;</span><span class="p">:</span>
                        <span class="n">CHANNELS</span> <span class="o">=</span> <span class="n">msg</span><span class="o">.</span><span class="n">channels</span>
                        <span class="n">chNames</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="n">CHANNELS</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span>
                        <span class="n">ELEMENTS</span> <span class="o">=</span> <span class="n">msg</span><span class="o">.</span><span class="n">elements</span>
                        <span class="c1">#initialize variables once we have channels and elements</span>
                        <span class="n">phi</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros</span><span class="p">((</span><span class="n">CHANNELS</span><span class="p">,</span> <span class="n">ELEMENTS</span><span class="p">))</span>
                        <span class="n">bla</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros</span><span class="p">((</span><span class="n">ELEMENTS</span><span class="p">,</span><span class="mi">1</span><span class="p">))</span>
                        <span class="n">lineArr</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="n">CHANNELS</span><span class="p">))</span>
                        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="n">CHANNELS</span><span class="p">):</span>
                            <span class="n">lineArr</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="o">=</span> <span class="n">ax</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">bla</span><span class="p">,</span> <span class="n">bla</span><span class="p">)</span>

                        <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;Properties: Channels: </span><span class="si">%i</span><span class="s2">, Elements: </span><span class="si">%i</span><span class="s2">&quot;</span> <span class="o">%</span><span class="p">(</span><span class="n">CHANNELS</span><span class="p">,</span> <span class="n">ELEMENTS</span><span class="p">))</span>

                    <span class="k">elif</span> <span class="n">msg</span><span class="o">.</span><span class="n">kind</span> <span class="o">==</span> <span class="s1">&#39;SignalProperties&#39;</span> <span class="ow">and</span> <span class="n">msg</span><span class="o">.</span><span class="n">sourceID</span> <span class="o">==</span> <span class="s1">&#39;States&#39;</span><span class="p">:</span>
                        <span class="k">pass</span>

                    <span class="k">elif</span> <span class="n">msg</span><span class="o">.</span><span class="n">kind</span> <span class="o">==</span> <span class="s1">&#39;Signal&#39;</span> <span class="ow">and</span> <span class="n">msg</span><span class="o">.</span><span class="n">sourceID</span> <span class="o">==</span> <span class="s1">&#39;Signal&#39;</span><span class="p">:</span>

                        <span class="k">if</span> <span class="n">msg</span><span class="o">.</span><span class="n">channels</span> <span class="o">!=</span> <span class="n">CHANNELS</span><span class="p">:</span>
                            <span class="k">raise</span> <span class="ne">RuntimeError</span><span class="p">(</span><span class="s1">&#39;Mismatch in number of channels&#39;</span><span class="p">)</span>
                        <span class="k">if</span> <span class="n">msg</span><span class="o">.</span><span class="n">elements</span> <span class="o">!=</span> <span class="n">ELEMENTS</span><span class="p">:</span>
                            <span class="k">raise</span> <span class="ne">RuntimeError</span><span class="p">(</span><span class="s1">&#39;Mismatch in number of elements&#39;</span><span class="p">)</span>

                        <span class="k">if</span> <span class="n">memoryName</span> <span class="o">!=</span> <span class="n">msg</span><span class="o">.</span><span class="n">shm</span><span class="p">:</span>
                            <span class="c1"># update shared memory object</span>
                            <span class="n">memoryName</span> <span class="o">=</span> <span class="n">msg</span><span class="o">.</span><span class="n">shm</span>
                            <span class="n">mem</span> <span class="o">=</span> <span class="n">shared_memory</span><span class="o">.</span><span class="n">SharedMemory</span><span class="p">(</span><span class="n">memoryName</span><span class="p">)</span>
                            <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Connected to shared memory: </span><span class="si">{</span><span class="n">memoryName</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
                            <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;Visualizing data...&quot;</span><span class="p">)</span>
                        
                        <span class="c1">#update visualization with new data</span>
                        <span class="n">data</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">ndarray</span><span class="p">((</span><span class="n">CHANNELS</span><span class="p">,</span><span class="n">ELEMENTS</span><span class="p">),</span><span class="n">dtype</span><span class="o">=</span><span class="n">np</span><span class="o">.</span><span class="n">double</span><span class="p">,</span> <span class="n">buffer</span><span class="o">=</span><span class="n">mem</span><span class="o">.</span><span class="n">buf</span><span class="p">)</span>
                        <span class="k">for</span> <span class="n">ch</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="n">CHANNELS</span><span class="p">):</span>
                            <span class="k">for</span> <span class="n">el</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">ELEMENTS</span><span class="p">):</span>
                                <span class="n">phi</span><span class="p">[</span><span class="n">ch</span><span class="p">,</span> <span class="n">el</span><span class="p">]</span> <span class="o">=</span> <span class="n">el</span><span class="o">*</span><span class="mi">2</span><span class="o">*</span><span class="n">np</span><span class="o">.</span><span class="n">pi</span><span class="o">/</span><span class="p">(</span><span class="n">ELEMENTS</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>

                            <span class="n">xdata</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">multiply</span><span class="p">(</span><span class="mi">1</span><span class="o">+</span><span class="mf">0.003</span><span class="o">*</span><span class="n">data</span><span class="p">[</span><span class="n">ch</span><span class="p">,:],</span><span class="n">np</span><span class="o">.</span><span class="n">cos</span><span class="p">(</span><span class="n">phi</span><span class="p">[</span><span class="n">ch</span><span class="p">,:]))</span>
                            <span class="n">ydata</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">multiply</span><span class="p">(</span><span class="mi">1</span><span class="o">+</span><span class="mf">0.003</span><span class="o">*</span><span class="n">data</span><span class="p">[</span><span class="n">ch</span><span class="p">,:],</span><span class="n">np</span><span class="o">.</span><span class="n">sin</span><span class="p">(</span><span class="n">phi</span><span class="p">[</span><span class="n">ch</span><span class="p">,:]))</span>
                            <span class="c1">#update plots</span>
                            <span class="n">lineArr</span><span class="p">[</span><span class="n">ch</span><span class="p">]</span><span class="o">.</span><span class="n">set_xdata</span><span class="p">(</span><span class="n">xdata</span><span class="p">)</span>
                            <span class="n">lineArr</span><span class="p">[</span><span class="n">ch</span><span class="p">]</span><span class="o">.</span><span class="n">set_ydata</span><span class="p">(</span><span class="n">ydata</span><span class="p">)</span>

                        <span class="c1">#update figure</span>
                        <span class="n">figure</span><span class="o">.</span><span class="n">canvas</span><span class="o">.</span><span class="n">draw</span><span class="p">()</span>
                        <span class="n">plt</span><span class="o">.</span><span class="n">pause</span><span class="p">(</span><span class="mf">0.01</span><span class="p">)</span> <span class="c1">#render update</span>

                    <span class="k">elif</span> <span class="n">msg</span><span class="o">.</span><span class="n">kind</span> <span class="o">==</span> <span class="s1">&#39;Parameter&#39;</span><span class="p">:</span>
                        <span class="k">continue</span>

                    <span class="k">elif</span> <span class="n">msg</span><span class="o">.</span><span class="n">kind</span> <span class="o">==</span> <span class="s1">&#39;Signal&#39;</span> <span class="ow">and</span> <span class="n">msg</span><span class="o">.</span><span class="n">sourceID</span> <span class="o">==</span> <span class="s1">&#39;States&#39;</span><span class="p">:</span>
                        <span class="k">pass</span>

                    <span class="k">elif</span> <span class="n">msg</span><span class="o">.</span><span class="n">kind</span> <span class="o">==</span> <span class="s1">&#39;SysCommand&#39;</span> <span class="ow">and</span> <span class="n">msg</span><span class="o">.</span><span class="n">command</span> <span class="o">==</span> <span class="s1">&#39;EndOfData&#39;</span><span class="p">:</span>
                        <span class="k">continue</span><span class="p">;</span>

                    <span class="k">elif</span> <span class="n">msg</span><span class="o">.</span><span class="n">kind</span> <span class="o">==</span> <span class="s1">&#39;SysCommand&#39;</span> <span class="ow">and</span> <span class="n">msg</span><span class="o">.</span><span class="n">command</span> <span class="o">==</span> <span class="s1">&#39;EndOfTransmission&#39;</span><span class="p">:</span>
                        <span class="k">continue</span><span class="p">;</span>

                    <span class="k">else</span><span class="p">:</span>
                        <span class="k">raise</span> <span class="ne">RuntimeError</span><span class="p">(</span><span class="s1">&#39;Unexpected BCI2000 message&#39;</span><span class="p">)</span>

            <span class="k">except</span> <span class="ne">EOFError</span><span class="p">:</span>
                <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;disconnected&#39;</span><span class="p">)</span>
                <span class="k">continue</span><span class="p">;</span>

            <span class="k">except</span> <span class="ne">Exception</span><span class="p">:</span>
                <span class="n">traceback</span><span class="o">.</span><span class="n">print_exc</span><span class="p">()</span>

<span class="k">except</span> <span class="ne">KeyboardInterrupt</span><span class="p">:</span>
    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;aborted by user&#39;</span><span class="p">)</span>
</pre></div>
<h2><span class="mw-headline" id="Conclusion">Conclusion</span></h2>
<p>This demo shows how to grab data from BCI2000 and plot it in Python! The main advantage of this demo shows how to access the data in Python. Once this is done, Python's extensive library can be used to create complex, real-time visualizations and calculations!
Also, this demo shows how to modify BCI2000 signals and states from Python.
</p>
<h2><span class="mw-headline" id="See_also">See also</span></h2>
<p><a href="Programming_Reference%253ASignalSharingDemoClient_C++_App.html" title="Programming Reference:SignalSharingDemoClient C++ App">Programming Reference:SignalSharingDemoClient C++ App</a>, <a href="Technical_Reference%253ABCI2000_Messages.html" title="Technical Reference:BCI2000 Messages">Technical Reference:BCI2000 Messages</a>,  <a href="User_Tutorial%253ABCI2000Remote.html" title="User Tutorial:BCI2000Remote">User Tutorial:BCI2000Remote</a>
</p>
<!-- 
NewPP limit report
Cached time: 20241129160626
Cache expiry: 86400
Reduced expiry: false
Complications: [show‐toc]
CPU time usage: 0.128 seconds
Real time usage: 0.133 seconds
Preprocessor visited node count: 34/1000000
Post‐expand include size: 0/2097152 bytes
Template argument size: 0/2097152 bytes
Highest expansion depth: 2/100
Expensive parser function count: 0/100
Unstrip recursion depth: 0/20
Unstrip post‐expand size: 60276/5000000 bytes
-->
<!--
Transclusion expansion time report (%,ms,calls,template)
100.00%    0.000      1 -total
-->

<!-- Saved in parser cache with key wikidb-bci_:pcache:idhash:2648-0!canonical and timestamp 20241129160626 and revision id 11637.
 -->
</div></div><div class="printfooter">
Retrieved from "<a dir="ltr" href="http://www.bci2000.org/mediawiki/index.php?title=Programming_Reference:SignalSharing_Python_Demo&amp;oldid=11637">http://www.bci2000.org/mediawiki/index.php?title=Programming_Reference:SignalSharing_Python_Demo&amp;oldid=11637</a>"</div>
 </div>
</body>
</html>