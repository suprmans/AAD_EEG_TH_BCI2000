<!DOCTYPE html>
<html lang="en" dir="ltr">
<head>
<meta charset="UTF-8"/>
<title>Programming Reference:SignalSharingDemoClient C++ App - BCI2000 Help</title>
<link rel='shortcut icon' href='../../rsrc/favicon.ico' />
<style type='text/css'>
html { font-size:95%; font-family:arial,helvetica,sans-serif }
.printfooter { display:none }
#tocmain { font-size:81%; font-weight:bold; color:grey; background-color:white; border:1px solid black; padding:1em; z-index:10; position:fixed; left:-1px; top:-1px; width:150px; }
#tocmain a { color:black; text-decoration:none }
#tocmain ul { margin:0 0 0 0.4em; padding:0.1em 0 0 0.1em; list-style-position:outside; list-style-type:disc }
#tocmain li { text-indent:0; margin:0 0 0 1em; padding: 0 0 0 0 }
#tocmain p { margin:0; padding:0.1em 0 0 0.1em }
#tocmain .toc1 { margin-left:1.25em; }
#tocmain .toc2 { margin-left:2.25em; }
#tocmain .toc3 { margin-left:3.25em; }
#article { font-size:91%; position:absolute; left:200px; right:0; padding:1em; margin:0 }
</style>
</head>
<body>
 <div id='tocmain'>
 <a href='Main_Page.html'><img src='../../rsrc/bci2000logo.svg' alt='[Main Page]' /></a> <hr class="sep" /><p class="toc0"><a href="User_Tutorial%253ABCI2000_Tour.html">GettingStarted</a></p><ul></ul><p class="toc0"><a href="User_Reference%253AContents.html">User Manual</a></p><ul></ul><p class="toc0"><a href="Technical_Reference%253AContents.html">Technical Reference</a></p><ul></ul><p class="toc0"><a href="Programming_Reference%253AContents.html">Programming Manual</a></p><ul><li class="toc1">Concepts</li><ul><li class="toc2"><a href="Programming_Reference%253AFilter_Chain.html">Filter Chain</a></li><li class="toc2"><a href="Programming_Reference%253ASignals.html">Signals</a></li><li class="toc2"><a href="Programming_Reference%253AError_Handling.html">Error Handling</a></li><li class="toc2"><a href="Programming_Reference%253ALocalization.html">Localization</a></li><li class="toc2"><a href="Programming_Reference%253ARapid_Development.html">Rapid Development</a></li></ul><li class="toc1">Reference</li><ul><li class="toc2"><a href="Programming_Reference%253AGenericFilter_Class.html">GenericFilter</a></li><li class="toc2"><a href="Programming_Reference%253AEnvironment_Class.html">Environment</a></li><li class="toc2"><a href="Programming_Reference%253AGenericVisualization_Class.html">GenericVisualization</a></li><li class="toc2"><a href="Programming_Reference%253AErrors_and_Warnings.html">Errors and Warnings</a></li><li class="toc2"><a href="Programming_Reference%253ADebug_Output.html">Debug Output</a></li></ul><li class="toc1">Data Acquisition</li><ul><li class="toc2"><a href="Programming_Reference%253AGenericADC_Class.html">GenericADC</a></li></ul><li class="toc1">Data Storage</li><ul><li class="toc2"><a href="Programming_Reference%253AGenericFileWriter_Class.html">GenericFileWriter</a></li><li class="toc2"><a href="Programming_Reference%253ABCI2000FileReader_Class.html">BCI2000FileReader</a></li></ul><li class="toc1">Signal Processing</li><ul><li class="toc2"><a href="Programming_Reference%253AIIRFilterBase_Class.html">IIR Filters</a></li></ul><li class="toc1">Application Modules</li><ul><li class="toc2"><a href="Programming_Reference%253AApplicationBase_Class.html">ApplicationBase</a></li><li class="toc2"><a href="Programming_Reference%253AFeedbackTask_Class.html">FeedbackTask</a></li><li class="toc2"><a href="Programming_Reference%253AStimulusTask_Class.html">StimulusTask</a></li><li class="toc2"><a href="Programming_Reference%253A3D_API.html">3D API</a></li></ul><li class="toc1">Howtos</li><ul><li class="toc2"><a href="Programming_Howto%253ABuilding_BCI2000.html">Building BCI2000</a></li><li class="toc2"><a href="Programming_Howto%253ASVN_Client_Setup.html">SVN Client Setup</a></li><li class="toc2"><a href="Programming_Howto%253AUsing_TortoiseSVN.html">Using TortoiseSVN</a></li></ul><li class="toc1"><a href="Programming_FAQ.html">FAQ</a></li><li class="toc1">Tutorials</li><ul><li class="toc2"><a href="Programming_Tutorial%253AImplementing_a_Data_Acquisition_Module.html">Data Acquisition</a></li><li class="toc2"><a href="Programming_Tutorial%253AImplementing_a_Signal_Processing_Filter.html">Signal Processing</a></li><li class="toc2"><a href="Programming_Tutorial%253AImplementing_a_Matlab-based_Filter.html">Matlab Signal Processing</a></li></ul></ul><p class="toc0"><a href="Contributions%253AContents.html">Contributions</a></p><ul></ul><hr class="sep" /><p class="toc0"><a href="BCI2000_Glossary.html">BCI2000 Glossary</a></p> </div>
 <div id='article'>
 <h1 class = "pagetitle">SignalSharingDemoClient C++ App</h1>
 <p class = "subtitle">Programming Reference</p>
 <hr class = "sep" />
 <div id="mw-content-text" class="mw-body-content mw-content-ltr" lang="en" dir="ltr"><div class="mw-parser-output"><div id="toc" class="toc" role="navigation" aria-labelledby="mw-toc-heading"><input type="checkbox" role="button" id="toctogglecheckbox" class="toctogglecheckbox" style="display:none" /><div class="toctitle" lang="en" dir="ltr"><h2 id="mw-toc-heading">Contents</h2><span class="toctogglespan"><label class="toctogglelabel" for="toctogglecheckbox"></label></span></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="Programming_Reference%253ASignalSharingDemoClient_C++_App.html#Location"><span class="tocnumber">1</span> <span class="toctext">Location</span></a></li>
<li class="toclevel-1 tocsection-2"><a href="Programming_Reference%253ASignalSharingDemoClient_C++_App.html#Synopsis"><span class="tocnumber">2</span> <span class="toctext">Synopsis</span></a></li>
<li class="toclevel-1 tocsection-3"><a href="Programming_Reference%253ASignalSharingDemoClient_C++_App.html#Function"><span class="tocnumber">3</span> <span class="toctext">Function</span></a></li>
<li class="toclevel-1 tocsection-4"><a href="Programming_Reference%253ASignalSharingDemoClient_C++_App.html#Client_application_code"><span class="tocnumber">4</span> <span class="toctext">Client application code</span></a>
<ul>
<li class="toclevel-2 tocsection-5"><a href="Programming_Reference%253ASignalSharingDemoClient_C++_App.html#Declaration_of_internal_variables"><span class="tocnumber">4.1</span> <span class="toctext">Declaration of internal variables</span></a></li>
<li class="toclevel-2 tocsection-6"><a href="Programming_Reference%253ASignalSharingDemoClient_C++_App.html#Initialization_of_internal_variables"><span class="tocnumber">4.2</span> <span class="toctext">Initialization of internal variables</span></a></li>
<li class="toclevel-2 tocsection-7"><a href="Programming_Reference%253ASignalSharingDemoClient_C++_App.html#Receiving_thread_function"><span class="tocnumber">4.3</span> <span class="toctext">Receiving thread function</span></a></li>
<li class="toclevel-2 tocsection-8"><a href="Programming_Reference%253ASignalSharingDemoClient_C++_App.html#The_widget&#39;s_paintEvent()"><span class="tocnumber">4.4</span> <span class="toctext">The widget's paintEvent()</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-9"><a href="Programming_Reference%253ASignalSharingDemoClient_C++_App.html#Parameters"><span class="tocnumber">5</span> <span class="toctext">Parameters</span></a>
<ul>
<li class="toclevel-2 tocsection-10"><a href="Programming_Reference%253ASignalSharingDemoClient_C++_App.html#ShareTransmissionFilter"><span class="tocnumber">5.1</span> <span class="toctext">ShareTransmissionFilter</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-11"><a href="Programming_Reference%253ASignalSharingDemoClient_C++_App.html#See_also"><span class="tocnumber">6</span> <span class="toctext">See also</span></a></li>
</ul>
</div>

<h2><span class="mw-headline" id="Location">Location</span></h2>
<p><tt>src/core/SignalProcessing/SignalSharingDemo</tt>
</p>
<h2><span class="mw-headline" id="Synopsis">Synopsis</span></h2>
<p>The <i>SignalSharingDemo</i> client demonstrates how to receive signal data from BCI2000, using shared memory.
SignalSharing allows to tap into BCI2000 processing by receiving any filter output signal through a combination of a TCP connection, and shared memory.
</p><p>For clarity, this page describes a simplified version of the <i>SignalSharingDemo</i> client, receiving only signal data, and not using the back channel to send back signal and state data. The full version in SVN shows how to use the full possibilities available to a SignalSharing client.
</p>
<h2><span class="mw-headline" id="Function">Function</span></h2>
<p>The <i>SignalSharing</i> component in BCI2000 shares its input signal through a <tt>GenericSignal</tt> object which has been linked to a shared memory block using <tt>GenericSignal::ShareAcrossModules()</tt>. A dedicated thread waits for signal updates, and sends signal data out to a separate application waiting on a TCP/IP connection.
</p><p>When the client application is running on a separate machine, full signal data are sent over the network. When the client is running on the same machine, only a reference to a shared memory block is sent. On the application side, unserializing the signal will transparently bind it to the shared memory block if available.
</p><p>The client application visualizes signal data by plotting normalized signals on a circle.
</p>
<ul class="gallery mw-gallery-nolines">
		<li class="gallerybox" style="width: 327px"><div style="width: 327px">
			<div class="thumb" style="width: 322px;"><div style="margin:0px auto;"><a href="https://www.bci2000.org/mediawiki/index.php/File:SignalSharingDemo1.PNG" class="image" title="Client application waiting for data"><img alt="Client application waiting for data" src="../images/6/6e/SignalSharingDemo1.PNG" decoding="async" width="322" height="352" /></a></div></div>
			<div class="gallerytext">
<p>Client application waiting for data
</p>
			</div>
		</div></li>
		<li class="gallerybox" style="width: 327px"><div style="width: 327px">
			<div class="thumb" style="width: 322px;"><div style="margin:0px auto;"><a href="https://www.bci2000.org/mediawiki/index.php/File:SignalSharingDemo2.PNG" class="image" title="Client application displaying data"><img alt="Client application displaying data" src="../images/4/49/SignalSharingDemo2.PNG" decoding="async" width="322" height="352" /></a></div></div>
			<div class="gallerytext">
<p>Client application displaying data
</p>
			</div>
		</div></li>
</ul>
<h2><span class="mw-headline" id="Client_application_code">Client application code</span></h2>
<p>The client application uses parts of the BCI2000 framework to efficiently receive and decode BCI2000 messages.
To include it into your own project, use
</p>
<pre>utils_include(Frameworks/Core)
</pre>
<p>in your CMake file if it is part of the BCI2000 project.
</p><p>Otherwise, you might to have to create code for dealing with BCI2000 messages yourself (message format definitions may be found
<a href="Technical_Reference%253ABCI2000_Messages.html#Descriptor_Supplement=3:_Signal_Properties" title="Technical Reference:BCI2000 Messages">here</a> and
<a href="Technical_Reference%253ABCI2000_Messages.html#Descriptor_Supplement=1:_Signal_Data" title="Technical Reference:BCI2000 Messages">here</a>).
</p>
<h3><span class="mw-headline" id="Declaration_of_internal_variables">Declaration of internal variables</span></h3>
<div class="mw-highlight mw-highlight-lang-cpp mw-content-ltr" dir="ltr"><pre><span></span><span class="cp">#include</span><span class="w"> </span><span class="cpf">&quot;SignalSharingDemoWidget.h&quot;</span>

<span class="cp">#include</span><span class="w"> </span><span class="cpf">&quot;Sockets.h&quot;</span>
<span class="cp">#include</span><span class="w"> </span><span class="cpf">&quot;StringUtils.h&quot;</span>
<span class="cp">#include</span><span class="w"> </span><span class="cpf">&quot;Streambuf.h&quot;</span>
<span class="cp">#include</span><span class="w"> </span><span class="cpf">&quot;Thread.h&quot;</span>
<span class="cp">#include</span><span class="w"> </span><span class="cpf">&quot;GenericSignal.h&quot;</span>
<span class="cp">#include</span><span class="w"> </span><span class="cpf">&quot;ParamList.h&quot;</span>
<span class="cp">#include</span><span class="w"> </span><span class="cpf">&quot;Synchronized.h&quot;</span>
<span class="cp">#include</span><span class="w"> </span><span class="cpf">&quot;Runnable.h&quot;</span>

<span class="cp">#include</span><span class="w"> </span><span class="cpf">&lt;QPaintEvent&gt;</span>
<span class="cp">#include</span><span class="w"> </span><span class="cpf">&lt;QPainter&gt;</span>

<span class="k">struct</span><span class="w"> </span><span class="nc">SignalSharingDemoWidget</span><span class="o">::</span><span class="n">Private</span>
<span class="p">{</span>
<span class="w">  </span><span class="n">SignalSharingDemoWidget</span><span class="o">*</span><span class="w"> </span><span class="n">mpSelf</span><span class="p">;</span>
<span class="w">  </span><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">QColor</span><span class="o">&gt;</span><span class="w"> </span><span class="n">mSignalColors</span><span class="p">;</span>

<span class="w">  </span><span class="n">ServerTCPSocket</span><span class="w"> </span><span class="n">mListeningSocket</span><span class="p">;</span>
<span class="w">  </span><span class="n">Synchronized</span><span class="o">&lt;</span><span class="kt">bool</span><span class="o">&gt;</span><span class="w"> </span><span class="n">mConnected</span><span class="p">;</span>
<span class="w">  </span><span class="n">SynchronizedObject</span><span class="o">&lt;</span><span class="n">GenericSignal</span><span class="o">&gt;</span><span class="w"> </span><span class="n">mpSignal</span><span class="p">;</span>
<span class="w">  </span><span class="n">SynchronizedObject</span><span class="o">&lt;</span><span class="n">ParamList</span><span class="o">&gt;</span><span class="w"> </span><span class="n">mpParameters</span><span class="p">;</span>

<span class="w">  </span><span class="n">Thread</span><span class="w"> </span><span class="n">mThread</span><span class="p">;</span>
<span class="w">  </span><span class="kt">void</span><span class="w"> </span><span class="nf">ThreadFunc</span><span class="p">();</span>
<span class="w">  </span><span class="n">MemberCall</span><span class="o">&lt;</span><span class="kt">void</span><span class="p">(</span><span class="n">Private</span><span class="o">*</span><span class="p">)</span><span class="o">&gt;</span><span class="w"> </span><span class="n">mThreadCall</span><span class="p">;</span>
<span class="w">  </span><span class="kt">void</span><span class="w"> </span><span class="nf">Invalidate</span><span class="p">();</span>
<span class="w">  </span><span class="n">Private</span><span class="p">();</span>
<span class="p">};</span>
</pre></div>
<h3><span class="mw-headline" id="Initialization_of_internal_variables">Initialization of internal variables</span></h3>
<div class="mw-highlight mw-highlight-lang-cpp mw-content-ltr" dir="ltr"><pre><span></span><span class="n">SignalSharingDemoWidget</span><span class="o">::</span><span class="n">Private</span><span class="o">::</span><span class="n">Private</span><span class="p">()</span>
<span class="o">:</span><span class="w"> </span><span class="n">mThreadCall</span><span class="p">(</span><span class="o">&amp;</span><span class="n">Private</span><span class="o">::</span><span class="n">ThreadFunc</span><span class="p">,</span><span class="w"> </span><span class="k">this</span><span class="p">),</span>
<span class="w">  </span><span class="n">mThread</span><span class="p">(</span><span class="o">&amp;</span><span class="n">mThreadCall</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;SignalSharingDemoWidget listening/receiving thread&quot;</span><span class="p">)</span>
<span class="p">{</span>
<span class="w">  </span><span class="n">mSignalColors</span><span class="p">.</span><span class="n">resize</span><span class="p">(</span><span class="mi">8</span><span class="p">);</span>
<span class="w">  </span><span class="k">for</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">mSignalColors</span><span class="p">.</span><span class="n">size</span><span class="p">();</span><span class="w"> </span><span class="o">++</span><span class="n">i</span><span class="p">)</span>
<span class="w">    </span><span class="n">mSignalColors</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">setHsvF</span><span class="p">(</span><span class="n">i</span><span class="o">*</span><span class="mf">1.0</span><span class="o">/</span><span class="n">mSignalColors</span><span class="p">.</span><span class="n">size</span><span class="p">(),</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="mf">0.9</span><span class="p">);</span>
<span class="p">}</span>
</pre></div>
<h3><span class="mw-headline" id="Receiving_thread_function">Receiving thread function</span></h3>
<p>By inheriting from the <tt>MessageChannel</tt> class, the <tt>Private</tt> object will receive dispatched
messages through overridden functions:
</p>
<div class="mw-highlight mw-highlight-lang-cpp mw-content-ltr" dir="ltr"><pre><span></span><span class="k">struct</span><span class="w"> </span><span class="nc">SignalSharingDemoWidget</span><span class="o">::</span><span class="n">Private</span><span class="w"> </span><span class="o">:</span><span class="w"> </span><span class="n">MessageChannel</span>
<span class="p">{</span>
<span class="w">    </span><span class="p">...</span>

<span class="w">    </span><span class="c1">// MessageChannel overrides</span>
<span class="w">    </span><span class="kt">bool</span><span class="w"> </span><span class="n">OnVisSignalProperties</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">istream</span><span class="o">&amp;</span><span class="p">)</span><span class="w"> </span><span class="k">override</span><span class="p">;</span>
<span class="w">    </span><span class="kt">bool</span><span class="w"> </span><span class="nf">OnVisSignal</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">istream</span><span class="o">&amp;</span><span class="p">)</span><span class="w"> </span><span class="k">override</span><span class="p">;</span>
<span class="w">    </span><span class="kt">bool</span><span class="w"> </span><span class="nf">OnParam</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">istream</span><span class="o">&amp;</span><span class="p">)</span><span class="w"> </span><span class="k">override</span><span class="p">;</span>
<span class="p">};</span>

<span class="kt">void</span><span class="w"> </span><span class="nf">SignalSharingDemoWidget::Private::ThreadFunc</span><span class="p">()</span>
<span class="p">{</span>
<span class="w">    </span><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="o">!</span><span class="n">mThread</span><span class="p">.</span><span class="n">Terminating</span><span class="p">())</span>
<span class="w">    </span><span class="p">{</span><span class="w"> </span><span class="c1">// wait for a connection</span>
<span class="w">        </span><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="n">mListeningSocket</span><span class="p">.</span><span class="n">Input</span><span class="p">().</span><span class="n">Wait</span><span class="p">())</span>
<span class="w">        </span><span class="p">{</span><span class="w"> </span><span class="c1">// accept pending connection</span>
<span class="w">            </span><span class="n">ClientTCPSocket</span><span class="w"> </span><span class="n">clientSocket</span><span class="p">;</span>
<span class="w">            </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">mListeningSocket</span><span class="p">.</span><span class="n">WaitForAccept</span><span class="p">(</span><span class="n">clientSocket</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">))</span>
<span class="w">            </span><span class="p">{</span>
<span class="w">                </span><span class="n">mConnected</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nb">true</span><span class="p">;</span>
<span class="w">                </span><span class="n">Invalidate</span><span class="p">();</span>
<span class="w">                </span><span class="n">mBuffer</span><span class="p">.</span><span class="n">SetInput</span><span class="p">(</span><span class="o">&amp;</span><span class="n">clientSocket</span><span class="p">.</span><span class="n">Input</span><span class="p">());</span>
<span class="w">                </span><span class="n">MessageBuffer</span><span class="o">::</span><span class="n">ClearIOState</span><span class="p">();</span>
<span class="w">                </span><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="n">clientSocket</span><span class="p">.</span><span class="n">Input</span><span class="p">().</span><span class="n">Wait</span><span class="p">())</span><span class="w"> </span><span class="c1">// will be interrupted by Thread::Terminate()</span>
<span class="w">                </span><span class="p">{</span>
<span class="w">                    </span><span class="n">MessageChannel</span><span class="o">::</span><span class="n">HandleMessage</span><span class="p">();</span><span class="w"> </span><span class="c1">// will dispatch to our overridden functions</span>
<span class="w">                                                     </span><span class="c1">// as appropriate</span>
<span class="w">                </span><span class="p">}</span>
<span class="w">                </span><span class="o">*</span><span class="n">mpSignal</span><span class="p">.</span><span class="n">Mutable</span><span class="p">()</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">GenericSignal</span><span class="p">();</span>
<span class="w">                </span><span class="n">mConnected</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nb">false</span><span class="p">;</span>
<span class="w">                </span><span class="n">Invalidate</span><span class="p">();</span>
<span class="w">            </span><span class="p">}</span>
<span class="w">        </span><span class="p">}</span>
<span class="w">    </span><span class="p">}</span>
<span class="p">}</span>

<span class="kt">bool</span><span class="w"> </span><span class="nf">SignalSharingDemoWidget::Private::OnVisSignalProperties</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">istream</span><span class="o">&amp;</span><span class="w"> </span><span class="n">is</span><span class="p">)</span>
<span class="p">{</span>
<span class="w">    </span><span class="n">VisSignalProperties</span><span class="w"> </span><span class="n">properties</span><span class="p">;</span><span class="w"> </span><span class="c1">// signal properties are wrapped into VisSignalProperties</span>
<span class="w">    </span><span class="n">properties</span><span class="p">.</span><span class="n">Unserialize</span><span class="p">(</span><span class="n">is</span><span class="p">);</span>
<span class="w">    </span><span class="c1">// The only information we need from signal properties is the sampling rate</span>
<span class="w">    </span><span class="c1">// because the signal&#39;s dimensions will be transported by signal messages as well.</span>
<span class="w">    </span><span class="kt">double</span><span class="w"> </span><span class="n">sampleDuration</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">properties</span><span class="p">.</span><span class="n">SignalProperties</span><span class="p">().</span><span class="n">ElementUnit</span><span class="p">().</span><span class="n">RawToPhysicalValue</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
<span class="w">    </span><span class="n">mSamplingRate</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mf">1.0</span><span class="w"> </span><span class="o">/</span><span class="w"> </span><span class="n">sampleDuration</span><span class="p">;</span>
<span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="nb">true</span><span class="p">;</span><span class="w"> </span><span class="c1">// indicate we read our data from the stream</span>
<span class="p">}</span>

<span class="kt">bool</span><span class="w"> </span><span class="nf">SignalSharingDemoWidget::Private::OnVisSignal</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">istream</span><span class="o">&amp;</span><span class="w"> </span><span class="n">is</span><span class="p">)</span>
<span class="p">{</span>
<span class="w">    </span><span class="n">VisSignal</span><span class="w"> </span><span class="n">visSignal</span><span class="p">;</span><span class="w"> </span><span class="c1">// signals are wrapped into VisSignal messages</span>
<span class="w">    </span><span class="n">visSignal</span><span class="p">.</span><span class="n">Unserialize</span><span class="p">(</span><span class="n">is</span><span class="p">);</span>
<span class="w">    </span><span class="n">mpSignal</span><span class="p">.</span><span class="n">Mutable</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">AssignValues</span><span class="p">(</span><span class="n">visSignal</span><span class="p">.</span><span class="n">Signal</span><span class="p">());</span><span class="w"> </span><span class="c1">// get current signal content</span>
<span class="w">    </span><span class="n">Invalidate</span><span class="p">();</span><span class="w"> </span><span class="c1">// request window update</span>
<span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="nb">true</span><span class="p">;</span><span class="w"> </span><span class="c1">// indicate we read our data from the stream</span>
<span class="p">}</span>

<span class="kt">bool</span><span class="w"> </span><span class="nf">SignalSharingDemoWidget::Private::OnParam</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">istream</span><span class="o">&amp;</span><span class="w"> </span><span class="n">is</span><span class="p">)</span>
<span class="p">{</span>
<span class="w">    </span><span class="n">Param</span><span class="w"> </span><span class="n">param</span><span class="p">;</span>
<span class="w">    </span><span class="n">param</span><span class="p">.</span><span class="n">Unserialize</span><span class="p">(</span><span class="n">is</span><span class="p">);</span>
<span class="w">    </span><span class="n">mpParamList</span><span class="p">.</span><span class="n">Mutable</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">Add</span><span class="p">(</span><span class="n">param</span><span class="p">);</span>
<span class="w">    </span><span class="n">Invalidate</span><span class="p">();</span><span class="w"> </span><span class="c1">// request window update</span>
<span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="nb">true</span><span class="p">;</span><span class="w"> </span><span class="c1">// indicate we read our data from the stream</span>
<span class="p">}</span>
</pre></div>
<h3><span id="The_widget.27s_paintEvent.28.29"></span><span class="mw-headline" id="The_widget's_paintEvent()">The widget's paintEvent()</span></h3>
<div class="mw-highlight mw-highlight-lang-cpp mw-content-ltr" dir="ltr"><pre><span></span><span class="kt">void</span>
<span class="nf">SignalSharingDemoWidget::paintEvent</span><span class="p">(</span><span class="n">QPaintEvent</span><span class="o">*</span><span class="w"> </span><span class="n">ev</span><span class="p">)</span>
<span class="p">{</span>
<span class="w">  </span><span class="n">ev</span><span class="o">-&gt;</span><span class="n">accept</span><span class="p">();</span>
<span class="w">  </span><span class="n">WithLocked</span><span class="p">(</span><span class="n">pSignal</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">p</span><span class="o">-&gt;</span><span class="n">mpSignal</span><span class="p">.</span><span class="n">Const</span><span class="p">())</span><span class="w"> </span><span class="c1">// lock the signal while reading from it</span>
<span class="w">  </span><span class="p">{</span>
<span class="w">    </span><span class="k">if</span><span class="p">(</span><span class="n">pSignal</span><span class="o">-&gt;</span><span class="n">Empty</span><span class="p">())</span>
<span class="w">    </span><span class="p">{</span>
<span class="w">      </span><span class="n">QPainter</span><span class="w"> </span><span class="n">painter</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
<span class="w">      </span><span class="n">painter</span><span class="p">.</span><span class="n">fillRect</span><span class="p">(</span><span class="n">ev</span><span class="o">-&gt;</span><span class="n">rect</span><span class="p">(),</span><span class="w"> </span><span class="n">Qt</span><span class="o">::</span><span class="n">gray</span><span class="p">);</span>
<span class="w">      </span><span class="n">painter</span><span class="p">.</span><span class="n">setPen</span><span class="p">(</span><span class="n">Qt</span><span class="o">::</span><span class="n">white</span><span class="p">);</span>
<span class="w">      </span><span class="n">painter</span><span class="p">.</span><span class="n">drawText</span><span class="p">(</span><span class="n">geometry</span><span class="p">(),</span><span class="w"> </span><span class="n">Qt</span><span class="o">::</span><span class="n">AlignCenter</span><span class="p">,</span><span class="w"> </span>
<span class="w">        </span><span class="n">p</span><span class="o">-&gt;</span><span class="n">mConnected</span><span class="w"> </span><span class="o">?</span><span class="w"> </span><span class="s">&quot;Waiting for signal ...&quot;</span><span class="w"> </span><span class="o">:</span><span class="w"> </span><span class="s">&quot;Waiting for connection ...&quot;</span><span class="p">);</span>
<span class="w">    </span><span class="p">}</span>
<span class="w">    </span><span class="k">else</span>
<span class="w">    </span><span class="p">{</span>
<span class="w">       </span><span class="c1">// draw some visualization into the widget</span>
<span class="w">       </span><span class="p">...</span>
<span class="w">    </span><span class="p">}</span>
<span class="w">  </span><span class="p">}</span>
<span class="p">}</span>
</pre></div>
<h2><span class="mw-headline" id="Parameters">Parameters</span></h2>
<h3><span class="mw-headline" id="ShareTransmissionFilter">ShareTransmissionFilter</span></h3>
<p>IP address and port number of the client application. The client's default address is <tt>localhost:1879</tt> but may be changed on the client's command line.
</p><p>The example uses the <i>ShareTransmissionFilter</i> parameter but any other filter's <i>Share&lt;FilterName&gt;</i> parameter under the <i>SignalSharing</i> tab will work as well to visualize the chosen filter's output signal.
</p>
<h2><span class="mw-headline" id="See_also">See also</span></h2>
<p><a href="User_Reference%253ASignalSharing.html" title="User Reference:SignalSharing">User Reference:SignalSharing</a>, <a href="Programming_Reference%253AGenericSignal_Class.html" title="Programming Reference:GenericSignal Class">Programming Reference:GenericSignal Class</a>,  <a href="Programming_Reference%253ASignalSharing_Python_Demo.html" title="Programming Reference:SignalSharing Python Demo">SignalSharing Python Demo</a>
</p>
<!-- 
NewPP limit report
Cached time: 20241129160623
Cache expiry: 86400
Reduced expiry: false
Complications: [show‐toc]
CPU time usage: 0.065 seconds
Real time usage: 0.074 seconds
Preprocessor visited node count: 61/1000000
Post‐expand include size: 0/2097152 bytes
Template argument size: 0/2097152 bytes
Highest expansion depth: 2/100
Expensive parser function count: 0/100
Unstrip recursion depth: 0/20
Unstrip post‐expand size: 21012/5000000 bytes
-->
<!--
Transclusion expansion time report (%,ms,calls,template)
100.00%    0.000      1 -total
-->

<!-- Saved in parser cache with key wikidb-bci_:pcache:idhash:2230-0!canonical and timestamp 20241129160623 and revision id 11643.
 -->
</div></div><div class="printfooter">
Retrieved from "<a dir="ltr" href="http://www.bci2000.org/mediawiki/index.php?title=Programming_Reference:SignalSharingDemoClient_C%2B%2B_App&amp;oldid=11643">http://www.bci2000.org/mediawiki/index.php?title=Programming_Reference:SignalSharingDemoClient_C%2B%2B_App&amp;oldid=11643</a>"</div>
 </div>
</body>
</html>