////////////////////////////////////////////////////////////////////////////////
// $Id$
// Author: mellinger@neurotechcenter.org
// Description: A Tiny::Thread::ThreadStarter implementation that uses QThread
//   instances as underlying thread objects (instead of std::thread).
//
// $BEGIN_BCI2000_LICENSE$
//
// This file is part of BCI2000, a platform for real-time bio-signal research.
// [ Copyright (C) 2000-2023: BCI2000 team and many external contributors ]
//
// BCI2000 is free software: you can redistribute it and/or modify it under the
// terms of the GNU General Public License as published by the Free Software
// Foundation, either version 3 of the License, or (at your option) any later
// version.
//
// BCI2000 is distributed in the hope that it will be useful, but
//                         WITHOUT ANY WARRANTY
// - without even the implied warranty of MERCHANTABILITY or FITNESS FOR
// A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License along with
// this program.  If not, see <http://www.gnu.org/licenses/>.
//
// $END_BCI2000_LICENSE$
////////////////////////////////////////////////////////////////////////////////
#include "QtThreadStarter.h"

#include "Debugging.h"

QtThreadStarter::~QtThreadStarter()
{
    std::unique_lock<std::mutex> lock(mMutex);
    for (QThread* pThread : mDispose) {
        if (pThread->isFinished())
            delete pThread;
        else
            SuggestDebugging << "Thread still running when about to be deleted";
    }
}

void* QtThreadStarter::StartThread(void* threadInstance, int(Thread::* RunThread)()) const
{
    std::unique_lock<std::mutex> lock(mMutex);
    std::vector<QThread*> stillToDispose;
    for (QThread* pThread : mDispose) {
        if (pThread->isFinished())
            delete pThread;
        else
            stillToDispose.push_back(pThread);
    }
    mDispose = stillToDispose;
    lock.unlock();

    Thread* obj = static_cast<Thread*>(threadInstance);
    QThread* p = QThread::create([obj, RunThread]() { (obj->*RunThread)(); });
    p->start();
    return p;
}

void QtThreadStarter::DisposeThread(void* threadObject) const
{
    QThread* obj = static_cast<QThread*>(threadObject);
    std::unique_lock<std::mutex> lock(mMutex);
    mDispose.push_back(obj);
}

