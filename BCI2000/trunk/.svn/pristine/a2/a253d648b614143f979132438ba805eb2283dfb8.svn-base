//////////////////////////////////////////////////////////////////////
// $Id: StringUtilsUnitTest.cpp 7633 2023-10-02 13:21:01Z mellinger $
// Author: mellinger@neurotechcenter.org
// Description: Unit tests for Tiny::FileUtils.
//
// $BEGIN_BCI2000_LICENSE$
//
// This file is part of BCI2000, a platform for real-time bio-signal research.
// [ Copyright (C) 2000-2023: BCI2000 team and many external contributors ]
//
// BCI2000 is free software: you can redistribute it and/or modify it under the
// terms of the GNU General Public License as published by the Free Software
// Foundation, either version 3 of the License, or (at your option) any later
// version.
//
// BCI2000 is distributed in the hope that it will be useful, but
//                         WITHOUT ANY WARRANTY
// - without even the implied warranty of MERCHANTABILITY or FITNESS FOR
// A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License along with
// this program.  If not, see <http://www.gnu.org/licenses/>.
//
// $END_BCI2000_LICENSE$
///////////////////////////////////////////////////////////////////////
#include "FileUtils.h"
#include "FilePath.h"

#include "UnitTest.h"
#include <ctime>

UnitTest(FilePathTest)
{
    unsigned int seed = static_cast<unsigned int>(::time(nullptr));
    ::srand(seed);

    FilePath path1("/usr/local/src/");
    TestRequire(path1.Kind() == FilePath::ambiguous);
    TestRequire(path1.HasRoot());
    TestRequire(path1.RootIsDrive() == false);
    TestRequire(path1.ElementCount() == 3);
    TestRequire(path1.NativeSeparator() == "/");
    TestRequire(path1.ToAbsolute("bar").ToString() == path1.ToString());

#if _WIN32
    FilePath path2("C:\\Users\\foo\\src");
    TestRequire(path2.Kind() == FilePath::absolute);
    TestRequire(path2.HasRoot());
    TestRequire(path2.RootIsDrive());
    TestRequire(path2.ElementCount() == 3);
    TestRequire(path2.NativeSeparator() == "\\");
    TestRequire(path2.ToAbsolute("bar").ToString() == path2.ToString());

    FilePath path3("C:\\Users\\foo/bar/..\\src");
    TestRequire(path3.Kind() == FilePath::absolute);
    TestRequire(path3.HasRoot());
    TestRequire(path3.RootIsDrive());
    TestRequire(path3.ElementCount() == 5);
    TestRequire(path3.NativeSeparator() == "\\");
    TestRequire(path3.Simplify().ToString() == path2.ToString());
#endif

    FilePath path4("/../usr/local/src/");
    TestRequire(path4.Kind() == FilePath::ambiguous);
    TestRequire(path4.HasRoot());
    TestRequire(path4.RootIsDrive() == false);
    TestRequire(path4.ElementCount() == 4);
    TestRequire(path4.NativeSeparator() == "/");
    TestRequire(path4.ToAbsolute("bar").ToString() == path4.ToString());
    TestRequire(path4.Simplify().ToString() == path1.ToString());

#if _WIN32
    FilePath path5("C:\\../Users/foo/src");
    TestRequire(path5.Kind() == FilePath::absolute);
    TestRequire(path5.HasRoot());
    TestRequire(path5.RootIsDrive());
    TestRequire(path5.ElementCount() == 4);
    TestRequire(path5.NativeSeparator() == "\\");
    TestRequire(path5.ToAbsolute("bar").ToString() == path5.ToString());
    TestRequire(path5.Simplify().ToString() == path2.ToString());

    FilePath path6("\\\\localhost\\Users\\foo\\src");
    TestRequire(path6.Kind() == (FilePath::absolute | FilePath::UNC));
    TestRequire(path6.HasRoot());
    TestRequire(path6.RootIsDrive() == false);
    TestRequire(path6.ElementCount() == 3);
    TestRequire(path6.NativeSeparator() == "\\");
    TestRequire(path6.Simplify().ToString() == path6.ToString());
#endif

    FilePath path7("local/src");
    TestRequire(path7.Kind() == FilePath::relative);
    TestRequire(path7.HasRoot() == false);
    TestRequire(path7.RootIsDrive() == false);
    TestRequire(path7.ElementCount() == 2);
    TestRequire(path7.NativeSeparator() == "/");
    TestRequire(path7.Simplify().ToString() == path7.ToString());
    TestRequire(path7.ToAbsolute("/usr").ToString() == "/usr/local/src");

#if _WIN32
    FileUtils::ChangeDirectory("c:\\");
    TestRequire(FileUtils::AbsolutePath("a\\b\\c") == "C:\\a\\b\\c");
#else
    FileUtils::ChangeDirectory("/");
    TestRequire(FileUtils::AbsolutePath("a/b/c") == "/a/b/c");
#endif
    std::string path8 = "../test/prog.exe";
    TestRequire(FileUtils::ExtractDirectory(path8) == "../test/");
    TestRequire(FileUtils::ExtractBase(path8) == "prog");
    TestRequire(FileUtils::ExtractExtension(path8) == ".exe");
    TestRequire(FileUtils::ExtractFile(path8) == "prog.exe");

#if _WIN32
    TestRequire(FileUtils::RelativePath("C:\\Program Files\\Common Files", "C:\\Program Files") == "Common Files");
    TestRequire(FileUtils::RelativePath("C:\\Program Files\\Common Files", "C:\\Users") == "..\\Program Files\\Common Files");
#else
    TestRequire(FileUtils::RelativePath("/usr/local/bin", "/usr") == "local/bin");
    TestRequire(FileUtils::RelativePath("/usr/local/bin", "/home") == "../usr/local/bin");
#endif

    TestRequire(FileUtils::Exists(FileUtils::TemporaryDirectory()));
    TestRequire(FileUtils::IsDirectory(FileUtils::TemporaryDirectory()));
    TestRequire(FileUtils::IsFile(FileUtils::TemporaryDirectory()) == false);

    FileUtils::TemporaryFile file;
    TestRequire(FileUtils::Exists(file.Name()));
    TestRequire(FileUtils::IsDirectory(file.Name()) == false);
    TestRequire(FileUtils::IsFile(file.Name()));

    std::string data = Random<std::string>(0.99);
    file.write(data.data(), data.size());
    file.flush();
    TestRequire(FileUtils::Length(file.Name()) == data.size());

    ::srand(1);
}
