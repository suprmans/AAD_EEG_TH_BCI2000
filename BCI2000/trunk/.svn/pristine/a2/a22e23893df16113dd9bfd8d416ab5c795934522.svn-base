<!DOCTYPE html>
<html lang="en" dir="ltr">
<head>
<meta charset="UTF-8"/>
<title>Python Visualizations - BCI2000 Help</title>
<link rel='shortcut icon' href='../../rsrc/favicon.ico' />
<style type='text/css'>
html { font-size:95%; font-family:arial,helvetica,sans-serif }
.printfooter { display:none }
#tocmain { font-size:81%; font-weight:bold; color:grey; background-color:white; border:1px solid black; padding:1em; z-index:10; position:fixed; left:-1px; top:-1px; width:150px; }
#tocmain a { color:black; text-decoration:none }
#tocmain ul { margin:0 0 0 0.4em; padding:0.1em 0 0 0.1em; list-style-position:outside; list-style-type:disc }
#tocmain li { text-indent:0; margin:0 0 0 1em; padding: 0 0 0 0 }
#tocmain p { margin:0; padding:0.1em 0 0 0.1em }
#tocmain .toc1 { margin-left:1.25em; }
#tocmain .toc2 { margin-left:2.25em; }
#tocmain .toc3 { margin-left:3.25em; }
#article { font-size:91%; position:absolute; left:200px; right:0; padding:1em; margin:0 }
</style>
</head>
<body>
 <div id='tocmain'>
 <a href='Main_Page.html'><img src='../../rsrc/bci2000logo.svg' alt='[Main Page]' /></a> <hr class="sep" /><p class="toc0"><a href="User_Tutorial%253ABCI2000_Tour.html">GettingStarted</a></p><ul></ul><p class="toc0"><a href="User_Reference%253AContents.html">User Manual</a></p><ul></ul><p class="toc0"><a href="Technical_Reference%253AContents.html">Technical Reference</a></p><ul></ul><p class="toc0"><a href="Programming_Reference%253AContents.html">Programming Manual</a></p><ul></ul><p class="toc0"><a href="Contributions%253AContents.html">Contributions</a></p><ul></ul><hr class="sep" /><p class="toc0"><a href="BCI2000_Glossary.html">BCI2000 Glossary</a></p> </div>
 <div id='article'>
 <h1 class = "pagetitle">Python Visualizations</h1>
 <p class = "subtitle"></p>
 <hr class = "sep" />
 <div id="mw-content-text" class="mw-body-content mw-content-ltr" lang="en" dir="ltr"><div class="mw-parser-output"><div class="thumb tright"><div class="thumbinner" style="width:618px;"><a href="https://www.bci2000.org/mediawiki/index.php/File:CCEP_gif.gif" class="image"><img alt="" src="../images/e/e2/CCEP_gif.gif" decoding="async" width="616" height="592" class="thumbimage" /></a>  <div class="thumbcaption"><div class="magnify"><a href="https://www.bci2000.org/mediawiki/index.php/File:CCEP_gif.gif" class="internal" title="Enlarge"></a></div>An example video showing one channel of the CCEP filter.</div></div></div>
<div class="thumb tright"><div class="thumbinner" style="width:570px;"><a href="https://www.bci2000.org/mediawiki/index.php/File:PAC_Demo.gif" class="image"><img alt="" src="../images/a/ac/PAC_Demo.gif" decoding="async" width="568" height="504" class="thumbimage" /></a>  <div class="thumbcaption"><div class="magnify"><a href="https://www.bci2000.org/mediawiki/index.php/File:PAC_Demo.gif" class="internal" title="Enlarge"></a></div>A demo of the Phase-Amplitude Coupling visualization with Python</div></div></div>
<div id="toc" class="toc" role="navigation" aria-labelledby="mw-toc-heading"><input type="checkbox" role="button" id="toctogglecheckbox" class="toctogglecheckbox" style="display:none" /><div class="toctitle" lang="en" dir="ltr"><h2 id="mw-toc-heading">Contents</h2><span class="toctogglespan"><label class="toctogglelabel" for="toctogglecheckbox"></label></span></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="Python_Visualizations.html#Synopsis"><span class="tocnumber">1</span> <span class="toctext">Synopsis</span></a></li>
<li class="toclevel-1 tocsection-2"><a href="Python_Visualizations.html#Installation"><span class="tocnumber">2</span> <span class="toctext">Installation</span></a></li>
<li class="toclevel-1 tocsection-3"><a href="Python_Visualizations.html#Demo_Use"><span class="tocnumber">3</span> <span class="toctext">Demo Use</span></a></li>
<li class="toclevel-1 tocsection-4"><a href="Python_Visualizations.html#Configuration"><span class="tocnumber">4</span> <span class="toctext">Configuration</span></a></li>
<li class="toclevel-1 tocsection-5"><a href="Python_Visualizations.html#Architecture"><span class="tocnumber">5</span> <span class="toctext">Architecture</span></a></li>
<li class="toclevel-1 tocsection-6"><a href="Python_Visualizations.html#Known_Issues"><span class="tocnumber">6</span> <span class="toctext">Known Issues</span></a>
<ul>
<li class="toclevel-2 tocsection-7"><a href="Python_Visualizations.html#Python"><span class="tocnumber">6.1</span> <span class="toctext">Python</span></a></li>
</ul>
</li>
</ul>
</div>

<h1><span class="mw-headline" id="Synopsis">Synopsis</span></h1>
<p>Visualize your BCI2000 signals real-time with python! This integration allows for you to combine complex Signal Processing pipelines in C++ with beautiful, interactive visualizations in Python. 
</p><p>There are currently two prepared visualizations: <a href="Contributions%253ACCEPFilter.html" title="Contributions:CCEPFilter">Cortico-cortical evoked potentials (CCEPs)</a> and <a href="Contributions%253APAC.html" title="Contributions:PAC">phase-amplitude coupling (PAC)</a>. However, the pipeline is adaptable, allowing you to visualize whatever you want!
</p>
<h1><span class="mw-headline" id="Installation">Installation</span></h1>
<ol><li>Python 3.7+ needs to be installed. <a rel="nofollow" class="external text" href="https://www.python.org/downloads/%7C">You can download the lastest version here</a>.</li>
<li>A couple additional packages are used in this visualization. Run the following segments using <code>pip</code> in the command line.
<ul><li>Numpy: <code>pip install numpy</code></li>
<li>PyQt5: <code>pip install PyQt5</code></li>
<li>PyQtGraph 0.13.3+: <code>pip install pyqtgraph</code></li>
<li>SciPy: <code>pip install scipy</code> (only the stats package is required)</li></ul></li></ol>
<h1><span class="mw-headline" id="Demo_Use">Demo Use</span></h1>
<p>Configure (BCI2000/build/Configure.sh.cmd) and build BCI2000 (Visual Studio), making sure to build Contributions (enable BUILD_CONTRIB flag, then build in Visual Studio). After this is done, navigate to <code>BCI2000 &#8594; python &#8594; visualizations</code>. Here you will find demo python files you can run out of the box!
</p>
<h1><span class="mw-headline" id="Configuration">Configuration</span></h1>
<p>Below is an example runnable script that will start BCI2000, along with the PAC visualization. This replaces the need for batch files, and allows you to easily run BCI2000 programmatically. Additional commands are available at <a href="Programming_Reference%253ABCI2000Remote_Class.html" title="Programming Reference:BCI2000Remote Class">Programming Reference:BCI2000Remote Class</a>. <i>Make sure to run this file in the correct location (<b>BCI2000 &#8594; python &#8594; visualizations</b>)</i>!
</p>
<div class="mw-highlight mw-highlight-lang-python mw-content-ltr" dir="ltr"><pre><span></span><span class="kn">from</span> <span class="nn">scripts.main</span> <span class="kn">import</span> <span class="n">main</span>

<span class="c1">#configure to customize your BCI2000 instance</span>
<span class="k">def</span> <span class="nf">initBCI2000</span><span class="p">(</span><span class="n">bci</span><span class="p">):</span>
    <span class="n">bci</span><span class="o">.</span><span class="n">WindowTitle</span> <span class="o">=</span> <span class="s1">&#39;BCI2000: Phase-Amplitude coupling&#39;</span>
    <span class="n">bci</span><span class="o">.</span><span class="n">Execute</span><span class="p">(</span><span class="s1">&#39;cd $</span><span class="si">{BCI2000LAUNCHDIR}</span><span class="s1">&#39;</span><span class="p">)</span>

    <span class="c1">#FilePlayback is helpful if you already have the data file</span>
    <span class="n">bci</span><span class="o">.</span><span class="n">StartupModules</span><span class="p">((</span><span class="s1">&#39;FilePlayback --PlaybackFileName=..\data\samplefiles\eeg3_1.dat&#39;</span><span class="p">,</span> 
                        <span class="s1">&#39;PAC&#39;</span><span class="p">,</span> 
                        <span class="s1">&#39;DummyApplication&#39;</span><span class="p">))</span>

    <span class="n">bci</span><span class="o">.</span><span class="n">SubjectID</span> <span class="o">=</span> <span class="s1">&#39;pacDemo&#39;</span>
    <span class="n">bci</span><span class="o">.</span><span class="n">LoadParametersRemote</span><span class="p">(</span><span class="s1">&#39;../parms/PAC/pac_pipeline.prm&#39;</span><span class="p">)</span>

    <span class="c1">#due to signal&#39;s low sampling rate</span>
    <span class="n">bci</span><span class="o">.</span><span class="n">Execute</span><span class="p">(</span><span class="s1">&#39;SET PARAMETER Amplitude/IIRBandpass/LowPassCorner 120Hz&#39;</span><span class="p">)</span>
    <span class="n">bci</span><span class="o">.</span><span class="n">Execute</span><span class="p">(</span><span class="s1">&#39;SET PARAMETER SourceDecimationFilter/LowPassCorner 120Hz&#39;</span><span class="p">)</span>

<span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s1">&#39;__main__&#39;</span><span class="p">:</span>
    <span class="n">main</span><span class="p">(</span><span class="n">initBCI2000</span><span class="p">)</span>
</pre></div>
<p>There are additional parameters you can pass <code>main()</code> (or don't pass it anything to be able to start your own batch file).
</p><p>Full definition: <code class="mw-highlight mw-highlight-lang-python mw-content-ltr" dir="ltr"><span class="k">def</span> <span class="nf">main</span><span class="p">(</span><span class="n">bciConfig</span> <span class="o">=</span> <span class="n">defaultBCI</span><span class="p">,</span> <span class="n">path</span><span class="o">=</span><span class="s2">&quot;../../prog&quot;</span><span class="p">,</span> <span class="n">address</span> <span class="o">=</span> <span class="p">(</span><span class="s2">&quot;localhost&quot;</span><span class="p">,</span> <span class="mi">1879</span><span class="p">),</span> <span class="n">winSize</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1600</span><span class="p">,</span> <span class="mi">1200</span><span class="p">),</span> <span class="n">timerUpdate</span><span class="o">=</span><span class="mi">30</span> <span class="p">)</span></code>
</p>
<ul><li><b><i>bciConfig</i></b>: the BCI2000 configuration (initBCI2000 function)</li>
<li><b><i>path</i></b>: the path to your BCI2000 prog directory. If this is configured, the python files can be run anywhere (as long as they keep their underlying architecture)</li>
<li><b><i>address</i></b>: the address that is used to communicate between BCI2000 and Python</li>
<li><b><i>winSize</i></b>: Default window size when it is opened</li>
<li><b><i>timerUpdate</i></b>: The minimum amount of time between each update of the Python GUI (milliseconds). This is really the frequency that the visualization checks if it should update, but only updates if there is new data. It has an upper bound of the BCI2000 block size, as that is how often data is updated. If the CPU load is large, increasing this number will help.</li></ul>
<h1><span class="mw-headline" id="Architecture">Architecture</span></h1>
<p>Once BCI2000 is configured and built, these files are used to visualize your signal in BCI2000 in real-time with Python:
</p>
<ul><li>BCI2000
<ul><li>python
<ul><li>visualizations - <i>contains "batch" files that you can run to start BCI2000 and the python visualization</i>
<ul><li>connect_batch.py - <i>run this to connect to a batch file you have started</i></li>
<li>pacDemo.py</li>
<li>ccepDemo.py</li>
<li>scripts
<ul><li>main.py - <i>starts the 2 secondary threads: data collection thread and BCI2000 connection thread</i></li>
<li>AcquireDataThread.py - <i>thread that handles the data collection from the shared memory</i></li>
<li>BCI2000Connection.py - <i>thread that handles the communication with the BCI2000 instance</i></li>
<li>CCEPVisualization.py - <i>specifies how to handle the incoming data into the CCEP visualization</i></li>
<li>PACVisualization.py: - <i>specifies how to do the same for the PAC visualization</i></li>
<li>DefaultVisualization.py: - <i>a default visualization</i></li>
<li>SharedVisualization.py: - <i>the abstract class which needs to be implemented for all visualizations</i></li></ul></li></ul></li></ul></li></ul></li></ul>
<p>These files can be moved around (if the path to BCI2000 is correctly specified), however <u>make sure to always keep the architecture under <i>visualizations</i> the same</u>.
</p>
<h1><span class="mw-headline" id="Known_Issues">Known Issues</span></h1>
<ul><li>Every once in a while (only seen with the CCEP visualization), BCI2000 thinks they are connected, but the Python side is not connected (still says <code>Attempting to connect to BCI2000...</code>). This can be fixed by simply pressing SetConfig again, as long as a run wasn't started (if it was, it brings us to the previous problem because the signal failed to send).</li></ul>
<h2><span class="mw-headline" id="Python">Python</span></h2>
<p>3 threads are running within the Python scripts.
</p>
<ol><li><b>Data acquisition:</b> Connects to the shared memory address and continually updates the local data when there is new data to be acquired.</li>
<li><b>BCI2000 Connection:</b> Using <a href="Programming_Reference%253ABCI2000Remote_Class.html" title="Programming Reference:BCI2000Remote Class">BCI2000Remote</a>, we have a two-way connection between Python and BCI2000. This is used for updating and acquiring states and parameters. This can also be used to start a BCI2000 instance, instead of the common practice of using a batch file.</li>
<li><b>Visualization:</b> The main thread of the Python script creates an interactive visualization with PyQtGraph. When the visualization is interacted with, BCI2000 states are updated accordingly.</li></ol>
<!-- 
NewPP limit report
Cached time: 20241129160708
Cache expiry: 86400
Reduced expiry: false
Complications: [show‐toc]
CPU time usage: 0.027 seconds
Real time usage: 0.030 seconds
Preprocessor visited node count: 35/1000000
Post‐expand include size: 0/2097152 bytes
Template argument size: 0/2097152 bytes
Highest expansion depth: 2/100
Expensive parser function count: 0/100
Unstrip recursion depth: 0/20
Unstrip post‐expand size: 3465/5000000 bytes
-->
<!--
Transclusion expansion time report (%,ms,calls,template)
100.00%    0.000      1 -total
-->

<!-- Saved in parser cache with key wikidb-bci_:pcache:idhash:2676-0!canonical and timestamp 20241129160708 and revision id 11400.
 -->
</div></div><div class="printfooter">
Retrieved from "<a dir="ltr" href="http://www.bci2000.org/mediawiki/index.php?title=Python_Visualizations&amp;oldid=11400">http://www.bci2000.org/mediawiki/index.php?title=Python_Visualizations&amp;oldid=11400</a>"</div>
 </div>
</body>
</html>