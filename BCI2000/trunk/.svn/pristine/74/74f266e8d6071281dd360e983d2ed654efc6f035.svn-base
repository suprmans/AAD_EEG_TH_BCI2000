<!DOCTYPE html>
<html lang="en" dir="ltr">
<head>
<meta charset="UTF-8"/>
<title>Contributions:BCI2000RemoteNET - BCI2000 Help</title>
<link rel='shortcut icon' href='../../rsrc/favicon.ico' />
<style type='text/css'>
html { font-size:95%; font-family:arial,helvetica,sans-serif }
.printfooter { display:none }
#tocmain { font-size:81%; font-weight:bold; color:grey; background-color:white; border:1px solid black; padding:1em; z-index:10; position:fixed; left:-1px; top:-1px; width:150px; }
#tocmain a { color:black; text-decoration:none }
#tocmain ul { margin:0 0 0 0.4em; padding:0.1em 0 0 0.1em; list-style-position:outside; list-style-type:disc }
#tocmain li { text-indent:0; margin:0 0 0 1em; padding: 0 0 0 0 }
#tocmain p { margin:0; padding:0.1em 0 0 0.1em }
#tocmain .toc1 { margin-left:1.25em; }
#tocmain .toc2 { margin-left:2.25em; }
#tocmain .toc3 { margin-left:3.25em; }
#article { font-size:91%; position:absolute; left:200px; right:0; padding:1em; margin:0 }
</style>
</head>
<body>
 <div id='tocmain'>
 <a href='Main_Page.html'><img src='../../rsrc/bci2000logo.svg' alt='[Main Page]' /></a> <hr class="sep" /><p class="toc0"><a href="User_Tutorial%253ABCI2000_Tour.html">GettingStarted</a></p><ul></ul><p class="toc0"><a href="User_Reference%253AContents.html">User Manual</a></p><ul></ul><p class="toc0"><a href="Technical_Reference%253AContents.html">Technical Reference</a></p><ul></ul><p class="toc0"><a href="Programming_Reference%253AContents.html">Programming Manual</a></p><ul></ul><p class="toc0"><a href="Contributions%253AContents.html">Contributions</a></p><ul><li class="toc1"><a href="Contributions%253AADCs.html">Data Acquisition</a></li><li class="toc1"><a href="Contributions%253AFileWriters.html">File Formats</a></li><li class="toc1"><a href="Contributions%253ASignalProcessing.html">Signal Processing</a></li><li class="toc1"><a href="Contributions%253AApplications.html">Applications</a></li><li class="toc1"><a href="Contributions%253ATools.html">Tools</a></li></ul><hr class="sep" /><p class="toc0"><a href="BCI2000_Glossary.html">BCI2000 Glossary</a></p> </div>
 <div id='article'>
 <h1 class = "pagetitle">BCI2000RemoteNET</h1>
 <p class = "subtitle">Contributions</p>
 <hr class = "sep" />
 <div id="mw-content-text" class="mw-body-content mw-content-ltr" lang="en" dir="ltr"><div class="mw-parser-output"><div id="toc" class="toc" role="navigation" aria-labelledby="mw-toc-heading"><input type="checkbox" role="button" id="toctogglecheckbox" class="toctogglecheckbox" style="display:none" /><div class="toctitle" lang="en" dir="ltr"><h2 id="mw-toc-heading">Contents</h2><span class="toctogglespan"><label class="toctogglelabel" for="toctogglecheckbox"></label></span></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="Contributions%253ABCI2000RemoteNET.html#Synopsis"><span class="tocnumber">1</span> <span class="toctext">Synopsis</span></a></li>
<li class="toclevel-1 tocsection-2"><a href="Contributions%253ABCI2000RemoteNET.html#Operation"><span class="tocnumber">2</span> <span class="toctext">Operation</span></a></li>
<li class="toclevel-1 tocsection-3"><a href="Contributions%253ABCI2000RemoteNET.html#Documentation"><span class="tocnumber">3</span> <span class="toctext">Documentation</span></a>
<ul>
<li class="toclevel-2 tocsection-4"><a href="Contributions%253ABCI2000RemoteNET.html#.NET_8.0"><span class="tocnumber">3.1</span> <span class="toctext">.NET 8.0</span></a></li>
<li class="toclevel-2 tocsection-5"><a href="Contributions%253ABCI2000RemoteNET.html#.NET_Standard_2.1"><span class="tocnumber">3.2</span> <span class="toctext">.NET Standard 2.1</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-6"><a href="Contributions%253ABCI2000RemoteNET.html#Installation"><span class="tocnumber">4</span> <span class="toctext">Installation</span></a></li>
<li class="toclevel-1 tocsection-7"><a href="Contributions%253ABCI2000RemoteNET.html#Usage"><span class="tocnumber">5</span> <span class="toctext">Usage</span></a>
<ul>
<li class="toclevel-2 tocsection-8"><a href="Contributions%253ABCI2000RemoteNET.html#Starting_the_operator"><span class="tocnumber">5.1</span> <span class="toctext">Starting the operator</span></a></li>
<li class="toclevel-2 tocsection-9"><a href="Contributions%253ABCI2000RemoteNET.html#Connecting_to_the_operator"><span class="tocnumber">5.2</span> <span class="toctext">Connecting to the operator</span></a></li>
<li class="toclevel-2 tocsection-10"><a href="Contributions%253ABCI2000RemoteNET.html#Adding_parameters_and_events"><span class="tocnumber">5.3</span> <span class="toctext">Adding parameters and events</span></a></li>
<li class="toclevel-2 tocsection-11"><a href="Contributions%253ABCI2000RemoteNET.html#Starting_BCI2000_Modules"><span class="tocnumber">5.4</span> <span class="toctext">Starting BCI2000 Modules</span></a></li>
<li class="toclevel-2 tocsection-12"><a href="Contributions%253ABCI2000RemoteNET.html#Setting_Parameters_and_Visualizing_Values"><span class="tocnumber">5.5</span> <span class="toctext">Setting Parameters and Visualizing Values</span></a></li>
<li class="toclevel-2 tocsection-13"><a href="Contributions%253ABCI2000RemoteNET.html#Collecting_Data"><span class="tocnumber">5.6</span> <span class="toctext">Collecting Data</span></a></li>
<li class="toclevel-2 tocsection-14"><a href="Contributions%253ABCI2000RemoteNET.html#Stopping_BCI2000"><span class="tocnumber">5.7</span> <span class="toctext">Stopping BCI2000</span></a></li>
<li class="toclevel-2 tocsection-15"><a href="Contributions%253ABCI2000RemoteNET.html#Using_other_BCI2000_Commands"><span class="tocnumber">5.8</span> <span class="toctext">Using other BCI2000 Commands</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-16"><a href="Contributions%253ABCI2000RemoteNET.html#Examples"><span class="tocnumber">6</span> <span class="toctext">Examples</span></a>
<ul>
<li class="toclevel-2 tocsection-17"><a href="Contributions%253ABCI2000RemoteNET.html#Using_BCI2000RemoteNET_as_a_substitute_for_BCI2000Shell"><span class="tocnumber">6.1</span> <span class="toctext">Using BCI2000RemoteNET as a substitute for BCI2000Shell</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-18"><a href="Contributions%253ABCI2000RemoteNET.html#Note_On_Security"><span class="tocnumber">7</span> <span class="toctext">Note On Security</span></a></li>
</ul>
</div>

<h2><span class="mw-headline" id="Synopsis">Synopsis</span></h2>
<p>BCI2000RemoteNET is a library for controlling BCI2000 from .NET programs such as Unity. With C# top-level declarations, it can also be used as a replacement for <a href="User_Reference%253ABCI2000Shell.html" title="User Reference:BCI2000Shell">User Reference:BCI2000Shell</a> with the added step of compilation via <a rel="nofollow" class="external text" href="https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-options/"><code>csc</code></a>. 
</p>
<h2><span class="mw-headline" id="Operation">Operation</span></h2>
<p>BCI2000RemoteNET communicates with the BCI2000 Operator via <a href="User_Reference%253AOperator_Module_Scripting.html" title="User Reference:Operator Module Scripting">operator module scripting commands</a>, which are sent as text over TCP to a running Operator. It also provides functionality for starting the Operator directly, so it can control the Operator entirely from startup to shutdown. 
</p><p>BCI2000RemoteNET consists of two classes, <code>BCI2000Connection</code>, which provides the basic functionality necessary for starting and communicating with BCI2000, and <code>BCI2000Remote</code>, which provides a set of methods for controlling a BCI2000 experiment, such as interacting with parameters and events, as well as starting modules and experiments.
</p><p>BCI2000RemoteNET comes in two versions, targeting .NET 8.0 and .NET Standard 2.1. This is due to compatibility with programs such as Unity, which require .NET Standard binaries. There is little difference in functionality between the two versions, other than the behavior of the <code>Execute()</code> method, whose differences are described below.
</p>
<h2><span class="mw-headline" id="Documentation">Documentation</span></h2>
<p>Documentation for the classes can be found here:
</p>
<h4><span class="mw-headline" id=".NET_8.0">.NET 8.0</span></h4>
<p><a rel="nofollow" class="external text" href="https://bci2000.org/BCI2000RemoteNET/net8/classBCI2000RemoteNET_1_1BCI2000Connection.html">BCI2000Connection</a>
</p><p><a rel="nofollow" class="external text" href="https://bci2000.org/BCI2000RemoteNET/net8/classBCI2000RemoteNET_1_1BCI2000Remote.html">BCI2000Remote</a>
</p>
<h4><span class="mw-headline" id=".NET_Standard_2.1">.NET Standard 2.1</span></h4>
<p><a rel="nofollow" class="external text" href="https://bci2000.org/BCI2000RemoteNET/netstandard2/classBCI2000RemoteNET_1_1BCI2000Connection.html">BCI2000Connection</a>
</p><p><a rel="nofollow" class="external text" href="https://bci2000.org/BCI2000RemoteNET/netstandard2/classBCI2000RemoteNET_1_1BCI2000Remote.html">BCI2000Remote</a>
</p>
<h2><span class="mw-headline" id="Installation">Installation</span></h2>
<p>Acquire the latest binary from <a rel="nofollow" class="external text" href="https://github.com/neurotechcenter/BCI2000RemoteNET">GitHub</a>, or build from source from the source code on GitHub or in the main BCI2000 Subversion repository (Keep in mind that the version in the Subversion repository will likely be behind the version on GitHub.)
</p>
<h2><span class="mw-headline" id="Usage">Usage</span></h2>
<h4><span class="mw-headline" id="Starting_the_operator">Starting the operator</span></h4>
<p>If you plan on starting the operator separately, skip this step, but make sure to start the operator with its <code>--Telnet</code> option set.
</p><p>In order to start the operator, call the <code>BCI2000Connection.StartOperator</code> method with the path to your BCI2000 Operator executable.
</p>
<pre>BCI2000Connection conn = new BCI2000Connection();
conn.StartOperator("Path/To/BCI2000/prog/Operator.exe");
</pre>
<p>By default, this will start an operator listening on <code>127.0.0.1:3999</code>. You can also set the Operator to listen on another port:
</p>
<pre>conn.StartOperator("path", port: 51101);
</pre>
<p>Or if you wish to accept connections from other computers you can set BCI2000 to listen on all addresses:
</p>
<pre>conn.StartOperator("path", address: "0.0.0.0");
</pre>
<p>Or listen on a specific network interface:
</p>
<pre>conn.StartOperator("path", address: "10.11.198.2");
</pre>
<p><br />
</p>
<h4><span class="mw-headline" id="Connecting_to_the_operator">Connecting to the operator</span></h4>
<p>Connect to the operator with the <code>BCI2000Connection.Connect()</code> method. If you started a local operator with default settings, then you can call <code>Connect</code> with its default parameters, which will connect to the operator at <code>127.0.0.1:3999</code>. If you are connecting to an operator on another machine, say at IP address <code>11.11.11.11</code>,or one listening on a port other than 3999, call <code>Connect()</code> with its optional parameters.
Please see the <a href="Contributions%253ABCI2000RemoteNET.html#Note_On_Security">#Note On Security</a> for an important caveat of setting a non-default parameter here.
</p>
<pre>BCI2000Connection conn = new BCI2000Connection();

//Connect to operator on the same machine on the default port.
conn.Connect();

//Connect to operator at address 11.11.11.11:3999
conn.Connect(address: "11.11.11.11");

BCI2000Remote bci = new(conn);

</pre>
<h4><span class="mw-headline" id="Adding_parameters_and_events">Adding parameters and events</span></h4>
<p>At this point you can add parameters and events to BCI2000. 
Parameters are values which can be changed in the BCI2000 GUI and can be used to change how experiments behave.
Parameters can either be loaded from a file:
</p>
<pre>  //path is relative to the Operator's working directory, that is, the /prog directory of the BCI2000 installation
  bci.LoadParameters("path/to/parameterfile.prm");
</pre>
<p>or added individually:
</p>
<pre>  //Parameter in the ParamArea section within the Application tab, with default value 0 
  bci.AddParameter("Application:ParamArea", "Param", "0");
  //Parameter in the ParamArea section within the Application tab, with default value "Green" 
  bci.AddParameter("Application:ParamArea", "Param2", "Green");
  //Parameter in the ParamArea2 section within the Application tab, with default value 0 and range 0-10
  bci.AddParameter("Application:ParamArea", "Param3", "0", "0", "10");
</pre>
<p>Events are values logged by BCI2000 alongside the signal data. They have a temporal resolution equivalent to the sample rate, and can be set and read throughout data collection.
Events are unsigned integers with a bit width between 1 and 32:
</p>
<pre>  //An event called "condition" representing a boolean value with possible values 0 and 1. Will be zero by default.
  bci.AddEvent("condition", 1);
  //An 32-bit event with default value 100, and range 0 to 2^32 - 1.
  bci.AddEvent("value1", 32, 100);
</pre>
<h4><span class="mw-headline" id="Starting_BCI2000_Modules">Starting BCI2000 Modules</span></h4>
<p>BCI2000 modules are started using the <code>StartModules()</code> method, given a dictionary of module names and argument lists. For example, to open SignalGenerator, DummySignalProcessing, and DummyApplication with keyboard and mouse logging:
</p>
<pre>bci.StartupModules(new Dictionary&lt;string, IEnumerable&lt;string&gt;?&gt;()
  {
    {"SignalGenerator", new List&lt;string&gt;() {"LogKeyboard=1", "LogMouse=1"}},
    {"DummySignalProcessing", null},
    {"DummyApplication", null}
  });
</pre>
<h4><span class="mw-headline" id="Setting_Parameters_and_Visualizing_Values">Setting Parameters and Visualizing Values</span></h4>
<p>If using BCI2000RemoteNET as a substitute for BCI2000Shell for setting up the basic environment, this would usually be where you continue using BCI2000 through its own GUI.
</p><p>At this point parameters can be set via <code>SetParameter</code>, for example, setting up experiment parameters:
</p>
<pre>  bci.SetParameter("DataDirectory", "../data/theDirectory");
  bci.SetParameter("SubjectName", "APatient");
  bci.SetParameter("SubjectSession", "004");
</pre>
<p>You can also set values such as events to be shown in a graph view. 
For example, since we set the source module to start with mouse logging enabled, we can view the values of the mouse position events.
</p>
<pre>  bci.Visualize("MousePosX");
  bci.Visualize("MousePosY");
</pre>
<p>We can also visualize the events we added earlier.
</p>
<pre>  bci.Visualize("condition");
  bci.Visualize("value1");
</pre>
<h4><span class="mw-headline" id="Collecting_Data">Collecting Data</span></h4>
<p>Start collecting data with the <code>Start()</code> method. This will implicitly call <code>SetConfig()</code>, but it can be called separately as well.
</p>
<pre>  bci.Start();
</pre>
<p>If you instead want to start BCI2000 through the GUI, and wait for it in this program, you can instead wait for BCI2000 to be in the <code>Running</code> state.
</p>
<pre>  bci.WaitForSystemState(BCI2000Remote.SystemState.Running);
</pre>
<p>During a run you can interact with BCI2000 by setting event variables:
</p>
<pre>  bci.SetEvent("value1", 400);
</pre>
<p>You can also pulse events, setting their value for one sample duration before setting them back.
</p>
<pre>  bci.PulseEvent("condition", 1);
</pre>
<p>You can also get values from BCI2000. As we set the source module to log the mouse position earlier, we can retrieve its value via <code>GetEvent()</code>.
</p>
<pre>  uint mousePositionX = bci.GetEvent("MousePosX");
  uint mousePositionY = bci.GetEvent("MousePosY");
</pre>
<p>You can also retrieve the value of the hardware signal. 
</p>
<pre>  //Get value of element 2 of channel 1 of signal
  double signal11 = bci.GetSignal(1, 2);X");
</pre>
<h4><span class="mw-headline" id="Stopping_BCI2000">Stopping BCI2000</span></h4>
<p>When you are finished collecting data, stop BCI2000 with the <code>BCI2000Connection.Stop()</code> method.
</p>
<pre>  bci.connection.Stop();
</pre>
<p>You can also shut down BCI2000.
</p>
<pre>  bci.connection.Quit();
</pre>
<p>If you instead want to stop BCI2000 via the GUI, you can wait for the system to be in the <code>Suspended</code> state. 
</p>
<pre>  bci.WaitForSystemState(BCI2000Remote.SystemState.Connected);
</pre>
<p>Or if you want to poll the system state repeatedly (in a loop, for example);
</p>
<pre>  
 bool loop = true;
  while (loop) {
    ...
    if (bci.GetSystemState() == BCI2000Remote.SystemState.Suspended) {
      loop = false;
    }
  }
</pre>
<h4><span class="mw-headline" id="Using_other_BCI2000_Commands">Using other BCI2000 Commands</span></h4>
<p>An arbitrary operator command can be sent using the <code>BCI2000Connection.Execute</code> method. In the .NET 8.0 version, <code>Execute()</code> and <code>Execute&lt;T&gt;()</code> are used. <code>Execute()</code> executes the command and throws an exception if it receives anything other than an empty response, whereas <code>Execute&lt;T&gt;</code>, where <code>T</code> is a type that implements <code>IParsable</code>, executes the command and attempts to parse the response as type <code>T</code>. 
</p><p>For example, setting the BCI2000 log level:
</p>
<pre>bci.Execute("set LogLevel 0");
</pre>
<p>Checking if an event exists:
</p>
<pre>bool eventExists = bci.Execute&lt;bool&gt;("exists event EventName");
</pre>
<p>Receiving the BCI2000 system version info:
</p>
<pre>Console.WriteLine(bci.Execute&lt;string&gt;("get system version"));
</pre>
<p>In the .NET Standard 2.1 version, there is no generic <code>Execute&lt;T&gt;()</code>, because the version of C# used by .NET Standard 2.1 does not include the <code>IParsable</code> interface. Instead, <code>ExecuteString, ExecuteBool, ExecuteUInt32, and ExecuteDouble</code> provide the functionality of parsing responses as basic types. If you need to interpret the response as a different type, use <code>ExecuteString</code> and parse the result. 
</p>
<h2><span class="mw-headline" id="Examples">Examples</span></h2>
<p>Embedding BCI2000RemoteNET within another program is largely covered above, so this section focuses on alternative usecases.
</p>
<h4><span class="mw-headline" id="Using_BCI2000RemoteNET_as_a_substitute_for_BCI2000Shell">Using BCI2000RemoteNET as a substitute for BCI2000Shell</span></h4>
<p>BCI2000RemoteNET can be used as a replacement for BCI2000Shell when starting up BCI2000, if you need more advanced language capabilities than what the operator scripting language can provide.
</p><p>This is the existing startup script for the Stimulus Presentation task with the software Signal Generator.
</p>
<pre>/batch/StimulusPresentation_SignalGenerator.bat</pre>
<pre>#! ../prog/BCI2000Shell
@cls &amp; ..\prog\BCI2000Shell %0&#160;%* #! &amp;&amp; exit /b 0 || exit /b 1\n
Change directory $BCI2000LAUNCHDIR
Show window; Set title ${Extract file base $0}
Reset system
Startup system localhost
Start executable SignalGenerator --local --LogKeyboard=1 --SpinningWheel=1 --ShowDisplayStatistics=1
Start executable P3SignalProcessing --local
Start executable StimulusPresentation --local
Wait for Connected
Load parameterfile "../parms/examples/StimulusPresentation_SignalGenerator.prm"
</pre>
<p>This is the equivalent C# code using BCI2000RemoteNET:
</p>
<pre>/batch/StimulusPresentation_SignalGenerator.cs</pre>
<pre>using BCI2000RemoteNET;
using System.RuntimeInformation.InteropServices;
BCI2000Remote bci = new(new BCI2000Connection());
bool isWindows = RuntimeInformation.IsOSPlatform(OSPlatform.Windows);
bci.connection.StartOperator("../prog/Operator" + isWindows&#160;? ".exe"&#160;: ""); //Add file extension if on windows 
bci.connection.Connect();
bci.LoadParameters("../parms/examples/StimulusPresentation_SignalGenerator.prm");
bci.StartupModules(new Dictionary&lt;string, IEnumerable&lt;string&gt;?&gt; {
	{"SignalGenerator", new() {"LogKeyboard=1", "SpinningWheel=1", "ShowDisplayStatistics=1"}},
	{"P3SignalProcessing", null},
	{"StimulusPresentation", null}
	});
</pre> 
<p>C# startup scripts have access to all of the constructs of the C# language, so different actions can be taken depending on conditions such as the operating system, as seen in the above script, or take other input such as command line options.
Note that this will need to be part of a C# project, created via <code>dotnet new console</code> with its accompanied <code>.csproj</code> file.
</p><p>An alternative would be to instead use a PowerShell or F# script, which can then be run via <code>pwsh</code> or <code>dotnet fsi</code>. This is the equivalent F# code:
</p>
<pre>/batch/StimulusPresentation_SignalGenerator.fsx</pre>
<pre>#r "../BCI2000RemoteNET.dll"
open BCI2000RemoteNET
open System.Runtime.InteropServices
let bci = new BCI2000Remote(new BCI2000Connection()) in
let isWindows = RuntimeInformation.IsOSPlatform(OSPlatform.Windows) in
let operatorPath = "../../bci2000/prog/Operator" + if isWindows then ".exe" else "" in
bci.connection.StartOperator operatorPath;
bci.connection.Connect ();
bci.LoadParameters "../parms/examples/StimulusPresentation_SignalGenerator.prm";
bci.StartupModules &lt;| Map [
  ("SignalGenerator", ["LogKeyboard=1"; "SpinningWheel=1"; "ShowDisplayStatistics=1"]);
  ("P3SignalProcessing", null);
  ("StimulusPresentation", null);
  ]
</pre>
<p>This can be run directly:
<code>dotnet fsi StimulusPresentation_SignalGenerator.fsx</code>
</p>
<h2><span class="mw-headline" id="Note_On_Security">Note On Security</span></h2>
<p>The BCI2000 command line interface can be used to run arbitrary system shell commands. It is also entirely unsecured and unencrypted. Anyone who has access to it effectively has full access to the computer on which it runs. This is not a problem if running locally, and is generally not a problem if running on a firewalled local network. However, due to the unsecured nature of the interface, running BCI2000 across the internet is highly discouraged. That is, if you set BCI2000 to listen at an address of an external network interface, or to listen at all connections by passing the address <code>0.0.0.0</code>, make sure that port 3999 (or whichever port BCI2000 is listening on), is not forwarded beyond the local network by your router. Support for securely connecting to BCI2000 is planned for the future.
</p>
<!-- 
NewPP limit report
Cached time: 20241129160205
Cache expiry: 86400
Reduced expiry: false
Complications: [show‐toc]
CPU time usage: 0.023 seconds
Real time usage: 0.029 seconds
Preprocessor visited node count: 211/1000000
Post‐expand include size: 0/2097152 bytes
Template argument size: 0/2097152 bytes
Highest expansion depth: 2/100
Expensive parser function count: 0/100
Unstrip recursion depth: 0/20
Unstrip post‐expand size: 4977/5000000 bytes
-->
<!--
Transclusion expansion time report (%,ms,calls,template)
100.00%    0.000      1 -total
-->

<!-- Saved in parser cache with key wikidb-bci_:pcache:idhash:2389-0!canonical and timestamp 20241129160205 and revision id 11354.
 -->
</div></div><div class="printfooter">
Retrieved from "<a dir="ltr" href="http://www.bci2000.org/mediawiki/index.php?title=Contributions:BCI2000RemoteNET&amp;oldid=11354">http://www.bci2000.org/mediawiki/index.php?title=Contributions:BCI2000RemoteNET&amp;oldid=11354</a>"</div>
 </div>
</body>
</html>